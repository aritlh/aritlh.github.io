<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aritlh&#39;s Wiki</title>
  
  
  <link href="http://aritlh.github.io/atom.xml" rel="self"/>
  
  <link href="http://aritlh.github.io/"/>
  <updated>2024-04-16T06:12:58.170Z</updated>
  <id>http://aritlh.github.io/</id>
  
  <author>
    <name>Aritlh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Network Security #3 Data Encapsulation</title>
    <link href="http://aritlh.github.io/wiki/Network%20Security/3.data-encapsulation/"/>
    <id>http://aritlh.github.io/wiki/Network%20Security/3.data-encapsulation/</id>
    <published>2024-04-16T05:57:13.000Z</published>
    <updated>2024-04-16T06:12:58.170Z</updated>
    
    <content type="html"><![CDATA[<p>Each layer in the IPS is built on the one below, and each layer is able to encapsulate the data from the layer above so it can move between the layers. Data transmitted by each layer is called a protocol data unit (PDU).</p><h2 id="Headers-Footers-and-Addresses"><a href="#Headers-Footers-and-Addresses" class="headerlink" title="Headers, Footers, and Addresses"></a>Headers, Footers, and Addresses</h2><p>The PDU in each layer contains the payload data that is being transmitted. It’s commont to prefix a header–which contains information required for the payload data to be transmitted, such as the addresses of the source and destination nodes on the network–to the payload data. Sometimes a PDU also has a footer that is suffixed to the payload data and contains values needed to ensure correct transmission, such as error-checking information. Figure below shows how the PDUs are laid out in the IPS.</p><p><img src="https://i.imgur.com/umgtap6.png" alt="IPS Data Encapsulation"></p><p>The TCP header contains a source destination port number ➊. These port numbers allow a single node to have multiple unique network connections. Port numbers for TCP (and UDP) range from <strong><ins>0 to 65535</ins></strong>. Most port numbers are assigned as needed to new connections, but some numbers have been given special assignments, such as poort 80 for HTTP. (You can find a current list of assigned port numbers in the <code>/etc/services</code> file on most Unix-like OS.) A TCP payload and header are commonly called segment, whereas a UDP payload and header are commonly called a datagram.</p><p>The IP protocol uses a source and a destination address ➋. The destination address allows the data to be sent to a specific node on the network. The source address allows the receiver of the data to know which node sent the data and allows the receiver to reply to the sender.</p><p>IPv4 uses 32-bit addresses, which you’ll typically ssee written as four number separated by dots, such as 192.168.10.1. IPv6 uses 128-bit addressses, because 32-bit addresses aren’t sufficient for the number of nodes on modern networks. IPv6 addresses are usually written as hexadecimal numbers separated by colons, such as fe80:0000:0000:0000:897b:581e:44b0:2057. Long strings of 0000 numbers are collapsed into two colons. For example, the preceding IPv6 address can also be written as fe80::897b:581e:44b0:2057. An IP payload and header are commonly called a packet.</p><p>Ethernet also contains source and destination addresses ➌. Ethernet uses a 64-bit value called a Media Access Control (MAC) address, which is typically set during manufacture of the Ethernet adapter. You’ll usually see MAC addresses written as a series of hexadecimal numbers separated by dashes or colons, such as 0A-00-27-00-00-0E. The Ethernet payload, including the header and footer, is commonly referred to as a frame.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Each layer in the IPS is built on the one below, and each layer is able to encapsulate the data from the layer above so it can move betwe</summary>
      
    
    
    
    <category term="Network Security" scheme="http://aritlh.github.io/categories/Network-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>Network Security #2 The Internet Protocol Suite</title>
    <link href="http://aritlh.github.io/wiki/Network%20Security/2-the-internet-protocol-suite/"/>
    <id>http://aritlh.github.io/wiki/Network%20Security/2-the-internet-protocol-suite/</id>
    <published>2024-04-16T05:21:13.000Z</published>
    <updated>2024-04-16T05:46:36.600Z</updated>
    
    <content type="html"><![CDATA[<p>TCP&#x2F;IP is the de facto protocol that modern networks use. Although you can think of TCP&#x2F;IP as a single protocol, it’s actually a combination of two protocols: the Transmission Control Protocol (TCP) and the Internet Protocol (IP). These two protocols form part of the Internet Protocol Suite (IPS), a conceptual model of how network protocols send network traffic over the internet that breaks down network communication into four layers.</p><p><img src="https://i.imgur.com/CoasvgC.png" alt="Internet Protocol Suite Layers"></p><p>These four layers form a protocol stack. The following list explains each layer of the IPS:</p><ul><li><strong>Link layer (layer 1)</strong> This layer is the lowest level and describes the physical mechanisms used to transfer information between nodes on a local network. Well-known examples include Ethernet (both wired and wireless) and Point-to-Point Protocol (PPP)</li><li><strong>Internet layer (layer 2)</strong> This layer provides the mechanisms for addressing network nodes. Unlike in layer 1, the nodes don’t have to be located on the local network. This level contains the IP; on modern networks, the actual protocol used could be either version 4 (IPv4) or version 6 (IPv6).</li><li><strong>Transport layer (layer 3)</strong> This layer is responsible for connections between clients and servers, sometimes ensuring the correct order of packets and providing service multiplexing. Service multiplexing allows a single node to support multiple different services by assigning a different number for each service; this number is called a port. TCP and the User Datagram Protocol (UDP) operate on this layer.</li><li><strong>Application layer (layer 4)</strong> This layer contains network protocols, such as the HyperText Transport Protocol (HTTP), which transfers web page contents; the Simple Mail Transport Protocol (SMTP), which transfers email; and the Domain Name System (DNS) protocol, which converts a name to a node on the network.</li></ul><p>Each layer interacts only with the layer above and below it, but there must be some external interactions with the stack.</p><p>The link layer interacts with a physical network connection, transmitting data in a physical medium, such as pulses of electricity or light. The application layer interacts with the user application: an application is a collection of related functionality that provides a service to a user.</p><p><img src="https://i.imgur.com/kmFinAk.png" alt="Example Mail Application"></p><p>Figure above shows an example of an application that processes email. The service provided by the mail application is the sending and receiving of messages over a network.</p><p>Typically, applications contain the following components:</p><ul><li><strong>Network communication</strong> This component communicates over the network and processes incoming and outgoing data. For a mail application, the network communication is most likely a standard protocol, such as SMTP or <a href="https://www.techtarget.com/whatis/definition/POP3-Post-Office-Protocol-3">POP3</a></li><li><strong>Content parsers</strong>  Data transferred over a network usually contains content that must be extracted and processed. Content might include textual data, such as the body of an email, or it might be pictures or video.</li><li><strong>User interface (UI)</strong> The UI allows the user to view received emails and to create new emails for transmission. In a mail application, the UI might display emails using HTML in a web browser.</li></ul><p>Note the user interacting with the UI doesn’t have to be a human being. It could be another application that automates the sending and receiving of emails through a command line tool.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TCP&amp;#x2F;IP is the de facto protocol that modern networks use. Although you can think of TCP&amp;#x2F;IP as a single protocol, it’s actually </summary>
      
    
    
    
    <category term="Network Security" scheme="http://aritlh.github.io/categories/Network-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>Network Security #1 Network Architecture and Protocols</title>
    <link href="http://aritlh.github.io/wiki/Network%20Security/1-network-architecture-and-protocols/"/>
    <id>http://aritlh.github.io/wiki/Network%20Security/1-network-architecture-and-protocols/</id>
    <published>2024-04-16T01:42:21.000Z</published>
    <updated>2024-04-16T05:50:46.064Z</updated>
    
    <content type="html"><![CDATA[<p>To attack network protocols, you need to understand the basic of computer networking. The more you understand how common networks are built and function, the easier it will be to apply that knowledge to capturing, analyzing, and exploiting new protocols.</p><p>Let’s start by reviewing some basic networking terminology and asking the fundamental question: “what is a network?”</p><p>A network is a set of two or more computers connected together to share information. It’s common to refer to each connected device as a node on the network to make the description applicalble to a wider range of devices.</p><p><img src="https://i.imgur.com/PEwP15r.png" alt="A simple network of three nodes"></p><p>The figure shows three nodes connected with a common network. Each node might have a different operating system or hardware. But as long as each node follows a set of rules, or network protocol, it can communicate with the other nodes one the network. To communicate correctly, all nodes on a network must understand the the same network protocol.</p><p>A network protocol serves many functions, including one or more of the following:</p><ul><li><strong>Maintaining session state</strong> Protocols typically implement mechanisms to create new connections and terminate existing connections.</li><li><strong>Identifying nodes through addressing</strong> Data must be transmitted to the correct node on a network. Some protocols implement an addressing mechanism to identify specific nodes or groups of nodes.</li><li><strong>Controlling flow</strong> The amount of data transferred across a network is limited. Protocols can implement ways of managing data flow to increase throughput and<br>reduce latency.</li><li><strong>Guaranteeing the order of transmitted data</strong> Many networks do not guarantee that the order in which the data is sent will match the order in which it’s received. A protocol can reorder the data to ensure it’s delivered in the correct order.</li><li><strong>Detecting and correcting errors</strong> Many networks are not 100 percent reliable; data can become corrupted. It’s important to detect corruption and, ideally, correct it.</li><li><strong>Formatting and encoding data</strong> Data isn’t always in a format suitable for transmitting on the network. A protocol can specify ways of encoding data, such as encoding English text into binary values.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;To attack network protocols, you need to understand the basic of computer networking. The more you understand how common networks are bui</summary>
      
    
    
    
    <category term="Network Security" scheme="http://aritlh.github.io/categories/Network-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>VueJS #4 Rendering Lists 1.1</title>
    <link href="http://aritlh.github.io/wiki/Programming/VueJS/4.rendering-lists.1.1/"/>
    <id>http://aritlh.github.io/wiki/Programming/VueJS/4.rendering-lists.1.1/</id>
    <published>2024-04-16T01:12:21.000Z</published>
    <updated>2024-04-16T05:19:05.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maintaining-State-with-key"><a href="#Maintaining-State-with-key" class="headerlink" title="Maintaining State with key"></a>Maintaining State with <code>key</code></h2><p>​When Vue is updating a list of elements rendered with <code>v-for</code>, by default it uses an “in-place patch” strategy. If the order of the data items has changed, instead of moving the DOM elements to match the order of the items, Vue will patch each element in-place and make sure it reflects what should be rendered at that particular index.</p><p>This default mode is efficient, but only suitable when your list render output does not rely on child component state or temporary DOM state (e.g. form input values).</p><p>To give Vue a hint so that it can track each node’s identity, and thus reuse and reorder existing elements, you need to provide a unique <code>key</code> attribute for each item:</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">div</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">item </span><span style="color: #D73A49">in</span><span style="color: #24292E"> items</span><span style="color: #032F62">&quot;</span><span style="color: #24292E"> :</span><span style="color: #6F42C1">key</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">item.id</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;!-- content --&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">div</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p>When using <code>&lt;template v-for&gt;</code>, the key should be placed on the <code>&lt;template&gt;</code> container:</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">template</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">todo </span><span style="color: #D73A49">in</span><span style="color: #24292E"> todos</span><span style="color: #032F62">&quot;</span><span style="color: #24292E"> :</span><span style="color: #6F42C1">key</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">todo.name</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;{{ todo.name }}&lt;/</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">template</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><blockquote><p><strong><em>Note</em></strong></p><p><em><code>key</code> here is a special attribute being bound with <code>v-bind</code>. It should not be confused with the property key variable when <a href="https://vuejs.org/guide/essentials/list.html#v-for-with-an-object">using <code>v-for</code> with an object</a>.</em></p></blockquote><p><a href="https://vuejs.org/style-guide/rules-essential#use-keyed-v-for">It is recommended</a> to provide a <code>key</code> attribute with <code>v-for</code> whenever possible, unless the iterated DOM content is simple (i.e. contains no components or stateful DOM elements), or you are intentionally relying on the default behavior for performance gains.</p><p>The <code>key</code> binding expects primitive values - i.e. strings and numbers. Do not use objects as <code>v-for</code> keys. For detailed usage of the <code>key</code> attribute, please see the key <a href="https://vuejs.org/api/built-in-special-attributes#key">API documentation</a>.</p><h2 id="v-for-with-a-Component"><a href="#v-for-with-a-Component" class="headerlink" title="v-for with a Component"></a><code>v-for</code> with a Component</h2><blockquote><p><em>This section assumes knowledge of <a href="https://vuejs.org/guide/essentials/component-basics">Components</a>. Feel free to skip it and come back later.</em></p></blockquote><p>You can directly use <code>v-for</code> on a component, like any normal element (don’t forget to provide a <code>key</code>):</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">MyComponent</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">item </span><span style="color: #D73A49">in</span><span style="color: #24292E"> items</span><span style="color: #032F62">&quot;</span><span style="color: #24292E"> :</span><span style="color: #6F42C1">key</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">item.id</span><span style="color: #032F62">&quot;</span><span style="color: #24292E"> /&gt;</span></span></code></pre></div></div></figure><p>However, this won’t automatically pass any data to the component, because components have isolated scopes of their own. In order to pass the iterated data into the component, we should also use props:</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">MyComponent</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">(item, index) </span><span style="color: #D73A49">in</span><span style="color: #24292E"> items</span><span style="color: #032F62">&quot;</span></span><span class="line"><span style="color: #24292E">  :</span><span style="color: #6F42C1">item</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">item</span><span style="color: #032F62">&quot;</span></span><span class="line"><span style="color: #24292E">  :</span><span style="color: #6F42C1">index</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">index</span><span style="color: #032F62">&quot;</span></span><span class="line"><span style="color: #24292E">  :</span><span style="color: #6F42C1">key</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">item.id</span><span style="color: #032F62">&quot;</span></span><span class="line"><span style="color: #24292E">/&gt;</span></span></code></pre></div></div></figure><p>The reason for not automatically injecting <code>item</code> into the component is because that makes the component tightly coupled to how <code>v-for</code> works. Being explicit about where its data comes from makes the component reusable in other situations.<br>​</p><h3 id="Example-of-a-Simple-Todo-List"><a href="#Example-of-a-Simple-Todo-List" class="headerlink" title="Example of a Simple Todo List"></a>Example of a Simple Todo List</h3><p>This example of a simple todo list to see how to render a list of components using v-for, passing different data to each instance.</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">// App.vue</span></span><span class="line"></span><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">script</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> TodoItem </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;./TodoItem.vue&#39;</span></span><span class="line"><span style="color: #24292E">  </span></span><span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> </span><span style="color: #D73A49">default</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  components: { TodoItem },</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">data</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">      newTodoText: </span><span style="color: #032F62">&#39;&#39;</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">      todos: [</span></span><span class="line"><span style="color: #24292E">        {</span></span><span class="line"><span style="color: #24292E">          id: </span><span style="color: #005CC5">1</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">          title: </span><span style="color: #032F62">&#39;Do the dishes&#39;</span></span><span class="line"><span style="color: #24292E">        },</span></span><span class="line"><span style="color: #24292E">        {</span></span><span class="line"><span style="color: #24292E">          id: </span><span style="color: #005CC5">2</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">          title: </span><span style="color: #032F62">&#39;Take out the trash&#39;</span></span><span class="line"><span style="color: #24292E">        },</span></span><span class="line"><span style="color: #24292E">        {</span></span><span class="line"><span style="color: #24292E">          id: </span><span style="color: #005CC5">3</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">          title: </span><span style="color: #032F62">&#39;Mow the lawn&#39;</span></span><span class="line"><span style="color: #24292E">        }</span></span><span class="line"><span style="color: #24292E">      ],</span></span><span class="line"><span style="color: #24292E">      nextTodoId: </span><span style="color: #005CC5">4</span></span><span class="line"><span style="color: #24292E">    }</span></span><span class="line"><span style="color: #24292E">  },</span></span><span class="line"><span style="color: #24292E">  methods: {</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">addNewTodo</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">      </span><span style="color: #005CC5">this</span><span style="color: #24292E">.todos.</span><span style="color: #6F42C1">push</span><span style="color: #24292E">({</span></span><span class="line"><span style="color: #24292E">        id: </span><span style="color: #005CC5">this</span><span style="color: #24292E">.nextTodoId</span><span style="color: #D73A49">++</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">        title: </span><span style="color: #005CC5">this</span><span style="color: #24292E">.newTodoText</span></span><span class="line"><span style="color: #24292E">      })</span></span><span class="line"><span style="color: #24292E">      </span><span style="color: #005CC5">this</span><span style="color: #24292E">.newTodoText </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;&#39;</span></span><span class="line"><span style="color: #24292E">    }</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">}</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">script</span><span style="color: #24292E">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">template</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">form</span><span style="color: #24292E"> </span><span style="color: #6F42C1">v-on</span><span style="color: #24292E">:</span><span style="color: #6F42C1">submit</span><span style="color: #24292E">.</span><span style="color: #6F42C1">prevent</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">addNewTodo</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">    &lt;</span><span style="color: #22863A">label</span><span style="color: #24292E"> </span><span style="color: #6F42C1">for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;new-todo&quot;</span><span style="color: #24292E">&gt;Add a todo&lt;/</span><span style="color: #22863A">label</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">    &lt;</span><span style="color: #22863A">input</span></span><span class="line"><span style="color: #24292E">      </span><span style="color: #6F42C1">v-model</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">newTodoText</span><span style="color: #032F62">&quot;</span></span><span class="line"><span style="color: #24292E">      </span><span style="color: #6F42C1">id</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;new-todo&quot;</span></span><span class="line"><span style="color: #24292E">      </span><span style="color: #6F42C1">placeholder</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;E.g. Feed the cat&quot;</span></span><span class="line"><span style="color: #24292E">    /&gt;</span></span><span class="line"><span style="color: #24292E">    &lt;</span><span style="color: #22863A">button</span><span style="color: #24292E">&gt;Add&lt;/</span><span style="color: #22863A">button</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;/</span><span style="color: #22863A">form</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;</span><span style="color: #22863A">ul</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">    &lt;</span><span style="color: #22863A">todo-item</span></span><span class="line"><span style="color: #24292E">      </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">(todo, index) </span><span style="color: #D73A49">in</span><span style="color: #24292E"> todos</span><span style="color: #032F62">&quot;</span></span><span class="line"><span style="color: #24292E">      :</span><span style="color: #6F42C1">key</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">todo.id</span><span style="color: #032F62">&quot;</span></span><span class="line"><span style="color: #24292E">      :</span><span style="color: #6F42C1">title</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">todo.title</span><span style="color: #032F62">&quot;</span></span><span class="line"><span style="color: #24292E">      @</span><span style="color: #6F42C1">remove</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">todos.</span><span style="color: #6F42C1">splice</span><span style="color: #24292E">(index, </span><span style="color: #005CC5">1</span><span style="color: #24292E">)</span><span style="color: #032F62">&quot;</span></span><span class="line"><span style="color: #24292E">    &gt;&lt;/</span><span style="color: #22863A">todo-item</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;/</span><span style="color: #22863A">ul</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">template</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">// TodoItem.vue</span></span><span class="line"></span><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">script</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> </span><span style="color: #D73A49">default</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">props: [</span><span style="color: #032F62">&#39;title&#39;</span><span style="color: #24292E">],</span></span><span class="line"><span style="color: #24292E">  emits: [</span><span style="color: #032F62">&#39;remove&#39;</span><span style="color: #24292E">]</span></span><span class="line"><span style="color: #24292E">}</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">script</span><span style="color: #24292E">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">template</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">    {{ title }}</span></span><span class="line"><span style="color: #24292E">    &lt;</span><span style="color: #22863A">button</span><span style="color: #24292E"> @</span><span style="color: #6F42C1">click</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #6F42C1">$emit</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;remove&#39;</span><span style="color: #24292E">)</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;Remove&lt;/</span><span style="color: #22863A">button</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;/</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">template</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p><img src="https://i.imgur.com/aI6sJWG.png" alt="Simple Todo List"></p><h2 id="Array-Change-Detection"><a href="#Array-Change-Detection" class="headerlink" title="Array Change Detection"></a>Array Change Detection</h2><h3 id="Mutation-Methods"><a href="#Mutation-Methods" class="headerlink" title="Mutation Methods"></a>Mutation Methods</h3><p>​Vue is able to detect when a reactive array’s mutation methods are called and trigger necessary updates. These mutation methods are:</p><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><h3 id="Replacing-an-Array"><a href="#Replacing-an-Array" class="headerlink" title="Replacing an Array"></a>Replacing an Array</h3><p>​Mutation methods, as the name suggests, mutate the original array they are called on. In comparison, there are also non-mutating methods, e.g. <code>filter()</code>, <code>concat()</code> and <code>slice()</code>, which do not mutate the original array but always return a new array. When working with non-mutating methods, we should replace the old array with the new one:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #005CC5">this</span><span style="color: #24292E">.items </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">this</span><span style="color: #24292E">.items.</span><span style="color: #6F42C1">filter</span><span style="color: #24292E">((</span><span style="color: #E36209">item</span><span style="color: #24292E">) </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> item.message.</span><span style="color: #6F42C1">match</span><span style="color: #24292E">(</span><span style="color: #032F62">/Foo/</span><span style="color: #24292E">))</span></span></code></pre></div></div></figure><p>You might think this will cause Vue to throw away the existing DOM and re-render the entire list - luckily, that is not the case. Vue implements some smart heuristics to maximize DOM element reuse, so replacing an array with another array containing overlapping objects is a very efficient operation.</p><h2 id="Displaying-Filtered-Sorted-Results"><a href="#Displaying-Filtered-Sorted-Results" class="headerlink" title="Displaying Filtered&#x2F;Sorted Results"></a>Displaying Filtered&#x2F;Sorted Results</h2><p>​Sometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.</p><p>For example:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6F42C1">data</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">return</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">    numbers: [</span><span style="color: #005CC5">1</span><span style="color: #24292E">, </span><span style="color: #005CC5">2</span><span style="color: #24292E">, </span><span style="color: #005CC5">3</span><span style="color: #24292E">, </span><span style="color: #005CC5">4</span><span style="color: #24292E">, </span><span style="color: #005CC5">5</span><span style="color: #24292E">]</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">},</span></span><span class="line"><span style="color: #6F42C1">computed</span><span style="color: #24292E">: {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">evenNumbers</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">this</span><span style="color: #24292E">.numbers.</span><span style="color: #6F42C1">filter</span><span style="color: #24292E">(</span><span style="color: #E36209">n</span><span style="color: #24292E"> </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> n </span><span style="color: #D73A49">%</span><span style="color: #24292E"> </span><span style="color: #005CC5">2</span><span style="color: #24292E"> </span><span style="color: #D73A49">===</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">)</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">li</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">n </span><span style="color: #D73A49">in</span><span style="color: #24292E"> evenNumbers</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;{{ n }}&lt;/</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p>In situations where computed properties are not feasible (e.g. inside nested <code>v-for</code> loops), you can use a method:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6F42C1">data</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">return</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">    sets: [[ </span><span style="color: #005CC5">1</span><span style="color: #24292E">, </span><span style="color: #005CC5">2</span><span style="color: #24292E">, </span><span style="color: #005CC5">3</span><span style="color: #24292E">, </span><span style="color: #005CC5">4</span><span style="color: #24292E">, </span><span style="color: #005CC5">5</span><span style="color: #24292E"> ], [</span><span style="color: #005CC5">6</span><span style="color: #24292E">, </span><span style="color: #005CC5">7</span><span style="color: #24292E">, </span><span style="color: #005CC5">8</span><span style="color: #24292E">, </span><span style="color: #005CC5">9</span><span style="color: #24292E">, </span><span style="color: #005CC5">10</span><span style="color: #24292E">]]</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">},</span></span><span class="line"><span style="color: #6F42C1">methods</span><span style="color: #24292E">: {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">even</span><span style="color: #24292E">(numbers) {</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> numbers.</span><span style="color: #6F42C1">filter</span><span style="color: #24292E">(</span><span style="color: #E36209">number</span><span style="color: #24292E"> </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> number </span><span style="color: #D73A49">%</span><span style="color: #24292E"> </span><span style="color: #005CC5">2</span><span style="color: #24292E"> </span><span style="color: #D73A49">===</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">)</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">ul</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">numbers </span><span style="color: #D73A49">in</span><span style="color: #24292E"> sets</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;li v-for=&quot;n in even(numbers)&quot;&gt;{{ n }}&lt;/li&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">ul</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p>Be careful with <code>reverse()</code> and <code>sort()</code> in a computed property! These two methods will mutate the original array, which should be avoided in computed getters. Create a copy of the original array before calling these methods:</p><figure class="shiki diff"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #B31D28">- return numbers.reverse()</span></span><span class="line"><span style="color: #22863A">+ return [...numbers].reverse()</span></span></code></pre></div></div></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Maintaining-State-with-key&quot;&gt;&lt;a href=&quot;#Maintaining-State-with-key&quot; class=&quot;headerlink&quot; title=&quot;Maintaining State with key&quot;&gt;&lt;/a&gt;Maintain</summary>
      
    
    
    
    <category term="Programming" scheme="http://aritlh.github.io/categories/Programming/"/>
    
    <category term="VueJS" scheme="http://aritlh.github.io/categories/Programming/VueJS/"/>
    
    
  </entry>
  
  <entry>
    <title>VueJS #3 Rendering Lists 1.0</title>
    <link href="http://aritlh.github.io/wiki/Programming/VueJS/3-rendering-lists-1.0/"/>
    <id>http://aritlh.github.io/wiki/Programming/VueJS/3-rendering-lists-1.0/</id>
    <published>2024-04-16T00:42:21.000Z</published>
    <updated>2024-04-16T01:45:12.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a><code>v-for</code></h2><p>We can use the <code>v-for</code> directive to render a list of items based on an array. The v-for directive requires a special syntax in the form of <code>item in items</code>, where <code>items</code> is the source data array and <code>item</code> is an alias for the array element being iterated on:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6F42C1">data</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">return</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">    items: [{ message: </span><span style="color: #032F62">&#39;Foo&#39;</span><span style="color: #24292E"> }, { message: </span><span style="color: #032F62">&#39;Bar&#39;</span><span style="color: #24292E"> }]</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">li</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">item </span><span style="color: #D73A49">in</span><span style="color: #24292E"> items</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  {{ item.message }}</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p>Inside the <code>v-for</code> scope, template expressions have access to all parent scope properties. In addition, <code>v-for</code> also supports an optional second alias for the index of the current item:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6F42C1">data</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">return</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">    parentMessage: </span><span style="color: #032F62">&#39;Parent&#39;</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">    items: [{ message: </span><span style="color: #032F62">&#39;Foo&#39;</span><span style="color: #24292E"> }, { message: </span><span style="color: #032F62">&#39;Bar&#39;</span><span style="color: #24292E"> }]</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">li</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">(item, index) </span><span style="color: #D73A49">in</span><span style="color: #24292E"> items</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  {{ parentMessage }} - {{ index }} - {{ item.message }}</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p><img src="https://i.imgur.com/fP5Bupi.png" alt="v-for"></p><p>The variable scoping of v-for is similar to the following JavaScript:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">parentMessage</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;Parent&#39;</span></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">items</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> [</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">/* ... */</span></span><span class="line"><span style="color: #24292E">]</span></span><span class="line"></span><span class="line"><span style="color: #24292E">items.</span><span style="color: #6F42C1">forEach</span><span style="color: #24292E">((</span><span style="color: #E36209">item</span><span style="color: #24292E">, </span><span style="color: #E36209">index</span><span style="color: #24292E">) </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// has access to outer scope `parentMessage`</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// but `item` and `index` are only available in here</span></span><span class="line"><span style="color: #24292E">  console.</span><span style="color: #6F42C1">log</span><span style="color: #24292E">(parentMessage, item.message, index)</span></span><span class="line"><span style="color: #24292E">})</span></span></code></pre></div></div></figure><p>Notice how the <code>v-for</code> value matches the function signature of the <code>forEach</code> callback. In fact, you can use destructuring on the <code>v-for</code> item alias similar to destructuring function arguments:</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">li</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">{ message } </span><span style="color: #D73A49">in</span><span style="color: #24292E"> items</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  {{ message }}</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #6A737D">&lt;!-- with index alias --&gt;</span></span><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">li</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">({ message }, index) </span><span style="color: #D73A49">in</span><span style="color: #24292E"> items</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  {{ message }} {{ index }}</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p>For nested <code>v-for</code>, scoping also works similar to nested functions. Each <code>v-for</code> scope has access to parent scopes:</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">li</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">item </span><span style="color: #D73A49">in</span><span style="color: #24292E"> items</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;span v-for=&quot;childItem in item.children&quot;&gt;</span></span><span class="line"><span style="color: #24292E">    {{ item.message }} {{ childItem }}</span></span><span class="line"><span style="color: #24292E">  &lt;/span&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p>You can also use <code>of</code> as the delimiter instead of <code>in</code>, so that it is closer to JavaScript’s syntax for iterators:</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">div</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">item </span><span style="color: #D73A49">of</span><span style="color: #24292E"> items</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;&lt;/</span><span style="color: #22863A">div</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><h2 id="v-for-with-an-Object"><a href="#v-for-with-an-Object" class="headerlink" title="v-for with an Object"></a><code>v-for</code> with an Object</h2><p>You can also use <code>v-for</code> to iterate through the properties of an object. The iteration order will be based on the result of calling <code>Object.keys()</code> on the object:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6F42C1">data</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">return</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">    myObject: {</span></span><span class="line"><span style="color: #24292E">      title: </span><span style="color: #032F62">&#39;How to do lists in Vue&#39;</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">      author: </span><span style="color: #032F62">&#39;Jane Doe&#39;</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">      publishedAt: </span><span style="color: #032F62">&#39;2016-04-10&#39;</span></span><span class="line"><span style="color: #24292E">    }</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">ul</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;li v-for=&quot;value in myObject&quot;&gt;</span></span><span class="line"><span style="color: #24292E">    {{ value }}</span></span><span class="line"><span style="color: #24292E">  &lt;/li&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">ul</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p>You can also provide a second alias for the property’s name (a.k.a. key):</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">li</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">(value, key) </span><span style="color: #D73A49">in</span><span style="color: #24292E"> myObject</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  {{ key }}: {{ value }}</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p>And another for the index:</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">li</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">(value, key, index) </span><span style="color: #D73A49">in</span><span style="color: #24292E"> myObject</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  {{ index }}. {{ key }}: {{ value }}</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p>​<br><img src="https://i.imgur.com/nknsZG2.png" alt="v-for with an Object"></p><h2 id="v-for-with-a-Range"><a href="#v-for-with-a-Range" class="headerlink" title="v-for with a Range"></a><code>v-for</code> with a Range</h2><p><code>v-for</code> can also take an integer. In this case it will repeat the template that many times, based on a range of <code>1...n</code>.</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">span</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">n </span><span style="color: #D73A49">in</span><span style="color: #24292E"> </span><span style="color: #005CC5">10</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;{{ n }}&lt;/</span><span style="color: #22863A">span</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p>Note here <code>n</code> starts with an initial value of <code>1</code> instead of <code>0</code>.</p><h2 id="v-for-on"><a href="#v-for-on" class="headerlink" title="v-for on &lt;template&gt;"></a><code>v-for</code> on <code>&lt;template&gt;</code></h2><p>Similar to template <code>v-if</code>, you can also use a <code>&lt;template&gt;</code> tag with <code>v-for</code> to render a block of multiple elements. For example:</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">ul</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;template v-for=&quot;item in items&quot;&gt;</span></span><span class="line"><span style="color: #24292E">    &lt;li&gt;{{ item.msg }}&lt;/li&gt;</span></span><span class="line"><span style="color: #24292E">    &lt;li class=&quot;divider&quot; role=&quot;presentation&quot;&gt;&lt;/li&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;/template&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">ul</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><h2 id="v-for-with-v-if"><a href="#v-for-with-v-if" class="headerlink" title="v-for with v-if"></a><code>v-for</code> with <code>v-if</code></h2><blockquote><p><strong><em>Note</em></strong></p><p><em>It’s not recommended to use <code>v-if</code> and <code>v-for</code> on the same element due to implicit precedence. Refer to <a href="https://vuejs.org/style-guide/rules-essential#avoid-v-if-with-v-for">style guide</a> for details.</em></p></blockquote><p>When they exist on the same node, <code>v-if</code> has a higher priority than <code>v-for</code>. That means the <code>v-if</code> condition will not have access to variables from the scope of the <code>v-for</code>:</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6A737D">&lt;!--</span></span><span class="line"><span style="color: #6A737D">This will throw an error because property &quot;todo&quot;</span></span><span class="line"><span style="color: #6A737D">is not defined on instance.</span></span><span class="line"><span style="color: #6A737D">--&gt;</span></span><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">li</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">todo </span><span style="color: #D73A49">in</span><span style="color: #24292E"> todos</span><span style="color: #032F62">&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-if</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #D73A49">!</span><span style="color: #24292E">todo.isComplete</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  {{ todo.name }}</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p>This can be fixed by moving <code>v-for</code> to a wrapping <code>&lt;template&gt;</code> tag (which is also more explicit):</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">template</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-for</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">todo </span><span style="color: #D73A49">in</span><span style="color: #24292E"> todos</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;</span><span style="color: #22863A">li</span><span style="color: #24292E"> </span><span style="color: #D73A49">v-if</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #D73A49">!</span><span style="color: #24292E">todo.isComplete</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">    {{ todo.name }}</span></span><span class="line"><span style="color: #24292E">  &lt;/</span><span style="color: #22863A">li</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">template</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;v-for&quot;&gt;&lt;a href=&quot;#v-for&quot; class=&quot;headerlink&quot; title=&quot;v-for&quot;&gt;&lt;/a&gt;&lt;code&gt;v-for&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;We can use the &lt;code&gt;v-for&lt;/code&gt; directive t</summary>
      
    
    
    
    <category term="Programming" scheme="http://aritlh.github.io/categories/Programming/"/>
    
    <category term="VueJS" scheme="http://aritlh.github.io/categories/Programming/VueJS/"/>
    
    
  </entry>
  
  <entry>
    <title>VueJS #2 App Configurations</title>
    <link href="http://aritlh.github.io/wiki/Programming/VueJS/2-app-configurations/"/>
    <id>http://aritlh.github.io/wiki/Programming/VueJS/2-app-configurations/</id>
    <published>2024-04-15T21:00:21.000Z</published>
    <updated>2024-04-16T00:40:13.897Z</updated>
    
    <content type="html"><![CDATA[<p>Every application instance exposes a <code>config</code> object that contains the configuration settings for that application. You can modify its properties before mounting your application.</p><h2 id="Application-API"><a href="#Application-API" class="headerlink" title="Application API"></a>Application API</h2><h3 id="CreateApp"><a href="#CreateApp" class="headerlink" title="CreateApp()"></a>CreateApp()</h3><p>Creates an application instance.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">function</span><span style="color: #24292E"> </span><span style="color: #6F42C1">createApp</span><span style="color: #24292E">(</span><span style="color: #E36209">rootComponent</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Component</span><span style="color: #24292E">, </span><span style="color: #E36209">rootProps</span><span style="color: #D73A49">?:</span><span style="color: #24292E"> </span><span style="color: #005CC5">object</span><span style="color: #24292E">)</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">App</span></span></code></pre></div></div></figure><ul><li><strong>Details</strong></li></ul><p>The first argument is the root component. The second optional argument is the props to be passed to the root component.</p><ul><li><strong>Example</strong></li></ul><p>With inline root component:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> { createApp } </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;vue&#39;</span></span><span class="line"></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">app</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">createApp</span><span style="color: #24292E">({</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">/* root component options */</span></span><span class="line"><span style="color: #24292E">})</span></span></code></pre></div></div></figure><p>With imported component:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> { createApp } </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;vue&#39;</span></span><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> App </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;./App.vue&#39;</span></span><span class="line"></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">app</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">createApp</span><span style="color: #24292E">(App)</span></span></code></pre></div></div></figure><h3 id="createSSRApp"><a href="#createSSRApp" class="headerlink" title="createSSRApp()"></a>createSSRApp()</h3><p>​Creates an application instance in <a href="https://vuejs.org/guide/scaling-up/ssr#client-hydration">SSR Hydration</a> mode. Usage is exactly the same as <code>createApp()</code>.</p><h3 id="app-mount"><a href="#app-mount" class="headerlink" title="app.mount()"></a>app.mount()</h3><p>​Mounts the application instance in a container element.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">App</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">mount</span><span style="color: #24292E">(</span><span style="color: #E36209">rootContainer</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Element</span><span style="color: #24292E"> </span><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #005CC5">string</span><span style="color: #24292E">)</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">ComponentPublicInstance</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>Details</strong></li></ul><p>The argument can either be an actual DOM element or a CSS selector (the first matched element will be used). Returns the root component instance.</p><p>If the component has a template or a render function defined, it will replace any existing DOM nodes inside the container. Otherwise, if the runtime compiler is available, the <code>innerHTML</code> of the container will be used as the template.</p><p>In SSR hydration mode, it will hydrate the existing DOM nodes inside the container. If there are <a href="https://vuejs.org/guide/scaling-up/ssr#hydration-mismatch">mismatches</a>, the existing DOM nodes will be morphed to match the expected output.</p><p>For each app instance, <code>mount()</code> can only be called once.</p><ul><li><strong>Example</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> { createApp } </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;vue&#39;</span></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">app</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">createApp</span><span style="color: #24292E">(</span><span style="color: #6A737D">/* ... */</span><span style="color: #24292E">)</span></span><span class="line"></span><span class="line"><span style="color: #24292E">app.</span><span style="color: #6F42C1">mount</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;#app&#39;</span><span style="color: #24292E">)</span></span></code></pre></div></div></figure><p>Can also mount to an actual DOM element:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">app.</span><span style="color: #6F42C1">mount</span><span style="color: #24292E">(document.body.firstChild)</span></span></code></pre></div></div></figure><h3 id="app-unmount"><a href="#app-unmount" class="headerlink" title="app.unmount()"></a>app.unmount()</h3><p>​Unmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application’s component tree.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">App</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">unmount</span><span style="color: #24292E">()</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">void</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><h3 id="app-component"><a href="#app-component" class="headerlink" title="app.component()"></a>app.component()</h3><p>​Registers a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">App</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">component</span><span style="color: #24292E">(</span><span style="color: #E36209">name</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">string</span><span style="color: #24292E">)</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Component</span><span style="color: #24292E"> </span><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #005CC5">undefined</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">component</span><span style="color: #24292E">(</span><span style="color: #E36209">name</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">string</span><span style="color: #24292E">, </span><span style="color: #E36209">component</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Component</span><span style="color: #24292E">)</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">this</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>Example</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> { createApp } </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;vue&#39;</span></span><span class="line"></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">app</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">createApp</span><span style="color: #24292E">({})</span></span><span class="line"></span><span class="line"><span style="color: #6A737D">// register an options object</span></span><span class="line"><span style="color: #24292E">app.</span><span style="color: #6F42C1">component</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;my-component&#39;</span><span style="color: #24292E">, {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">/* ... */</span></span><span class="line"><span style="color: #24292E">})</span></span><span class="line"></span><span class="line"><span style="color: #6A737D">// retrieve a registered component</span></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">MyComponent</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> app.</span><span style="color: #6F42C1">component</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;my-component&#39;</span><span style="color: #24292E">)</span></span></code></pre></div></div></figure><ul><li><strong>See also</strong> <a href="https://vuejs.org/guide/components/registration">Component Registration</a></li></ul><h3 id="app-directive"><a href="#app-directive" class="headerlink" title="app.directive()"></a>app.directive()</h3><p>Registers a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">App</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">directive</span><span style="color: #24292E">(</span><span style="color: #E36209">name</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">string</span><span style="color: #24292E">)</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Directive</span><span style="color: #24292E"> </span><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #005CC5">undefined</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">directive</span><span style="color: #24292E">(</span><span style="color: #E36209">name</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">string</span><span style="color: #24292E">, </span><span style="color: #E36209">directive</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Directive</span><span style="color: #24292E">)</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">this</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>Example</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> { createApp } </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;vue&#39;</span></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">app</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">createApp</span><span style="color: #24292E">({</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">/* ... */</span></span><span class="line"><span style="color: #24292E">})</span></span><span class="line"></span><span class="line"><span style="color: #6A737D">// register (object directive)</span></span><span class="line"><span style="color: #24292E">app.</span><span style="color: #6F42C1">directive</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;my-directive&#39;</span><span style="color: #24292E">, {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">/* custom directive hooks */</span></span><span class="line"><span style="color: #24292E">})</span></span><span class="line"></span><span class="line"><span style="color: #6A737D">// register (function directive shorthand)</span></span><span class="line"><span style="color: #24292E">app.</span><span style="color: #6F42C1">directive</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;my-directive&#39;</span><span style="color: #24292E">, () </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">/* ... */</span></span><span class="line"><span style="color: #24292E">})</span></span><span class="line"></span><span class="line"><span style="color: #6A737D">// retrieve a registered directive</span></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">myDirective</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> app.</span><span style="color: #6F42C1">directive</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;my-directive&#39;</span><span style="color: #24292E">)</span></span></code></pre></div></div></figure><ul><li><strong>See also</strong> <a href="https://vuejs.org/guide/reusability/custom-directives">Custom Directives</a></li></ul><h3 id="app-use"><a href="#app-use" class="headerlink" title="app.use()"></a>app.use()</h3><p>​Installs a <a href="https://vuejs.org/guide/reusability/plugins">plugin</a>.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">App</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">use</span><span style="color: #24292E">(</span><span style="color: #E36209">plugin</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Plugin</span><span style="color: #24292E">, </span><span style="color: #D73A49">...</span><span style="color: #E36209">options</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">any</span><span style="color: #24292E">[])</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">this</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>Details</strong></li></ul><p>Expects the plugin as the first argument, and optional plugin options as the second argument.</p><p>The plugin can either be an object with an <code>install()</code> method, or just a function that will be used as the <code>install()</code> method. The options (second argument of <code>app.use()</code>) will be passed along to the plugin’s <code>install()</code> method.</p><p>When <code>app.use()</code> is called on the same plugin multiple times, the plugin will be installed only once.</p><ul><li><strong>Example</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> { createApp } </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;vue&#39;</span></span><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> MyPlugin </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;./plugins/MyPlugin&#39;</span></span><span class="line"></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">app</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">createApp</span><span style="color: #24292E">({</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">/* ... */</span></span><span class="line"><span style="color: #24292E">})</span></span><span class="line"></span><span class="line"><span style="color: #24292E">app.</span><span style="color: #6F42C1">use</span><span style="color: #24292E">(MyPlugin)</span></span></code></pre></div></div></figure><ul><li><strong>See also</strong> <a href="https://vuejs.org/guide/reusability/plugins">Plugins</a></li></ul><h3 id="app-mixin"><a href="#app-mixin" class="headerlink" title="app.mixin()"></a>app.mixin()</h3><p>​Applies a global mixin (scoped to the application). A global mixin applies its included options to every component instance in the application.</p><blockquote><p><strong><em>Not Recommended</em></strong></p><p><em>Mixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries. Use of mixins, especially global mixins, should be avoided in application code.</em></p><p><em>For logic reuse, prefer Composables instead.</em></p></blockquote><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">App</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">mixin</span><span style="color: #24292E">(</span><span style="color: #E36209">mixin</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">ComponentOptions</span><span style="color: #24292E">)</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">this</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><h3 id="app-provide"><a href="#app-provide" class="headerlink" title="app.provide()"></a>app.provide()</h3><p>​Provide a value that can be injected in all descendant components within the application.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">App</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">provide</span><span style="color: #24292E">&lt;</span><span style="color: #6F42C1">T</span><span style="color: #24292E">&gt;(</span><span style="color: #E36209">key</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">InjectionKey</span><span style="color: #24292E">&lt;</span><span style="color: #6F42C1">T</span><span style="color: #24292E">&gt; </span><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #005CC5">symbol</span><span style="color: #24292E"> </span><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #005CC5">string</span><span style="color: #24292E">, </span><span style="color: #E36209">value</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">T</span><span style="color: #24292E">)</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">this</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>Details</strong></li></ul><p>Expects the injection key as the first argument, and the provided value as the second. Returns the application instance itself.</p><ul><li><strong>Example</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> { createApp } </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;vue&#39;</span></span><span class="line"></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">app</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">createApp</span><span style="color: #24292E">(</span><span style="color: #6A737D">/* ... */</span><span style="color: #24292E">)</span></span><span class="line"></span><span class="line"><span style="color: #24292E">app.</span><span style="color: #6F42C1">provide</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;message&#39;</span><span style="color: #24292E">, </span><span style="color: #032F62">&#39;hello&#39;</span><span style="color: #24292E">)</span></span></code></pre></div></div></figure><p>Inside a component in the application:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> </span><span style="color: #D73A49">default</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  inject: [</span><span style="color: #032F62">&#39;message&#39;</span><span style="color: #24292E">],</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">created</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">    console.</span><span style="color: #6F42C1">log</span><span style="color: #24292E">(</span><span style="color: #005CC5">this</span><span style="color: #24292E">.message) </span><span style="color: #6A737D">// &#39;hello&#39;</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>See also</strong><ul><li><a href="https://vuejs.org/guide/components/provide-inject">Provide &#x2F; Inject</a></li><li><a href="https://vuejs.org/guide/components/provide-inject#app-level-provide">App-level Provide</a></li><li><a href="https://vuejs.org/api/application.html#app-runwithcontext">app.runWithContext()</a></li></ul></li></ul><h3 id="app-runWithContext-3-3"><a href="#app-runWithContext-3-3" class="headerlink" title="app.runWithContext() 3.3+"></a>app.runWithContext() <code>3.3+</code></h3><p>​Execute a callback with the current app as injection context.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">App</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">runWithContext</span><span style="color: #24292E">&lt;</span><span style="color: #6F42C1">T</span><span style="color: #24292E">&gt;(</span><span style="color: #6F42C1">fn</span><span style="color: #D73A49">:</span><span style="color: #24292E"> () </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> </span><span style="color: #6F42C1">T</span><span style="color: #24292E">)</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">T</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>Details</strong></li></ul><p>Expects a callback function and runs the callback immediately. During the synchronous call of the callback, <code>inject()</code> calls are able to look up injections from the values provided by the current app, even when there is no current active component instance. The return value of the callback will also be returned.</p><ul><li><strong>Example</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> { inject } </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;vue&#39;</span></span><span class="line"></span><span class="line"><span style="color: #24292E">app.</span><span style="color: #6F42C1">provide</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;id&#39;</span><span style="color: #24292E">, </span><span style="color: #005CC5">1</span><span style="color: #24292E">)</span></span><span class="line"></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">injected</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> app.</span><span style="color: #6F42C1">runWithContext</span><span style="color: #24292E">(() </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #6F42C1">inject</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;id&#39;</span><span style="color: #24292E">)</span></span><span class="line"><span style="color: #24292E">})</span></span><span class="line"></span><span class="line"><span style="color: #24292E">console.</span><span style="color: #6F42C1">log</span><span style="color: #24292E">(injected) </span><span style="color: #6A737D">// 1</span></span></code></pre></div></div></figure><h3 id="app-version"><a href="#app-version" class="headerlink" title="app.version"></a>app.version</h3><p>​Provides the version of Vue that the application was created with. This is useful inside <a href="https://vuejs.org/guide/reusability/plugins">plugins</a>, where you might need conditional logic based on different Vue versions.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">App</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #E36209">version</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">string</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>Example</strong></li></ul><p>Performing a version check inside a plugin:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> </span><span style="color: #D73A49">default</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">install</span><span style="color: #24292E">(</span><span style="color: #E36209">app</span><span style="color: #24292E">) {</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">version</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Number</span><span style="color: #24292E">(app.version.</span><span style="color: #6F42C1">split</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;.&#39;</span><span style="color: #24292E">)[</span><span style="color: #005CC5">0</span><span style="color: #24292E">])</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> (version </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">3</span><span style="color: #24292E">) {</span></span><span class="line"><span style="color: #24292E">      console.</span><span style="color: #6F42C1">warn</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;This plugin requires Vue 3&#39;</span><span style="color: #24292E">)</span></span><span class="line"><span style="color: #24292E">    }</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>See also</strong> <a href="https://vuejs.org/api/general#version">Global API - version</a></li></ul><h3 id="app-config"><a href="#app-config" class="headerlink" title="app.config"></a>app.config</h3><p>​Every application instance exposes a <code>config</code> object that contains the configuration settings for that application. You can modify its properties (documented below) before mounting your application.</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> { createApp } </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;vue&#39;</span></span><span class="line"></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">app</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">createApp</span><span style="color: #24292E">(</span><span style="color: #6A737D">/* ... */</span><span style="color: #24292E">)</span></span><span class="line"></span><span class="line"><span style="color: #24292E">console.</span><span style="color: #6F42C1">log</span><span style="color: #24292E">(app.config)</span></span></code></pre></div></div></figure><h3 id="app-config-errorHandler"><a href="#app-config-errorHandler" class="headerlink" title="app.config.errorHandler"></a>app.config.errorHandler</h3><p>​Assign a global handler for uncaught errors propagating from within the application.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">AppConfig</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">errorHandler</span><span style="color: #D73A49">?:</span><span style="color: #24292E"> (</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #E36209">err</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">unknown</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #E36209">instance</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">ComponentPublicInstance</span><span style="color: #24292E"> </span><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #005CC5">null</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// `info` is a Vue-specific error info,</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// e.g. which lifecycle hook the error was thrown in</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #E36209">info</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">string</span></span><span class="line"><span style="color: #24292E">  ) </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">void</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>Details</strong></li></ul><p>The error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.</p><p>It can capture errors from the following sources:</p><ul><li>Component renders</li><li>Event handlers</li><li>Lifecycle hooks</li><li><code>setup()</code> function</li><li>Watchers</li><li>Custom directive hooks</li><li>Transition hooks</li></ul><blockquote><p><strong><em>TIP</em></strong></p><p><em>In production, the 3rd argument (<code>info</code>) will be a shortened code instead of the full information string. You can find the code to string mapping in the Production Error Code Reference.</em></p></blockquote><ul><li><strong>Example</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">app.config.</span><span style="color: #6F42C1">errorHandler</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> (</span><span style="color: #E36209">err</span><span style="color: #24292E">, </span><span style="color: #E36209">instance</span><span style="color: #24292E">, </span><span style="color: #E36209">info</span><span style="color: #24292E">) </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// handle error, e.g. report to a service</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><h3 id="app-config-warnHandler"><a href="#app-config-warnHandler" class="headerlink" title="app.config.warnHandler"></a>app.config.warnHandler</h3><p>​Assign a custom handler for runtime warnings from Vue.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">AppConfig</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">warnHandler</span><span style="color: #D73A49">?:</span><span style="color: #24292E"> (</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #E36209">msg</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">string</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #E36209">instance</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">ComponentPublicInstance</span><span style="color: #24292E"> </span><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #005CC5">null</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #E36209">trace</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">string</span></span><span class="line"><span style="color: #24292E">  ) </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">void</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>Details</strong></li></ul><p>The warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third.</p><p>It can be used to filter out specific warnings to reduce console verbosity. All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done.</p><blockquote><p><strong><em>TIP</em></strong></p><p><em>Warnings only work during development, so this config is ignored in production mode.</em></p></blockquote><ul><li><strong>Example</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">app.config.</span><span style="color: #6F42C1">warnHandler</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> (</span><span style="color: #E36209">msg</span><span style="color: #24292E">, </span><span style="color: #E36209">instance</span><span style="color: #24292E">, </span><span style="color: #E36209">trace</span><span style="color: #24292E">) </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// `trace` is the component hierarchy trace</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><h3 id="app-config-performance"><a href="#app-config-performance" class="headerlink" title="app.config.performance"></a>app.config.performance</h3><p>​Set this to <code>true</code> to enable component init, compile, render and patch performance tracing in the browser devtool performance&#x2F;timeline panel. Only works in development mode and in browsers that support the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark">performance.mark</a> API.</p><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>See also</strong> <a href="https://vuejs.org/guide/best-practices/performance">Guide - Performance</a></p></li></ul><h3 id="app-config-compilerOptions"><a href="#app-config-compilerOptions" class="headerlink" title="app.config.compilerOptions"></a>app.config.compilerOptions</h3><p>​Configure runtime compiler options. Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app. Note you can also override these options on a per-component basis using the <a href="https://vuejs.org/api/options-rendering#compileroptions"><code>compilerOptions</code> option</a>.</p><blockquote><p><strong><em>Important</em></strong></p><p><em>This config option is only respected when using the full build (i.e. the standalone <code>vue.js</code> that can compile templates in the browser). If you are using the runtime-only build with a build setup, compiler options must be passed to <code>@vue/compiler-dom</code> via build tool configurations instead.</em></p><ul><li><em>For <code>vue-loader</code>: <a href="https://vue-loader.vuejs.org/options.html#compileroptions">pass via the <code>compilerOptions</code> loader option. Also see how to configure it in <code>vue-cli</code></a>.</em></li><li><em>For <code>vite</code>: <a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#options">pass via <code>@vitejs/plugin-vue</code> options</a>.</em></li></ul></blockquote><h3 id="app-config-compilerOptions-isCustomElement"><a href="#app-config-compilerOptions-isCustomElement" class="headerlink" title="app.config.compilerOptions.isCustomElement"></a>app.config.compilerOptions.isCustomElement</h3><p>​Specifies a check method to recognize native custom elements.</p><ul><li><p><strong>Type:</strong> <code>(tag: string) =&gt; boolean</code></p></li><li><p><strong>Details</strong></p></li></ul><p>Should return <code>true</code> if the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.</p><p>Native HTML and SVG tags don’t need to be matched in this function - Vue’s parser recognizes them automatically.</p><ul><li><strong>Example</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6A737D">// treat all tags starting with &#39;ion-&#39; as custom elements</span></span><span class="line"><span style="color: #24292E">app.config.compilerOptions.</span><span style="color: #6F42C1">isCustomElement</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> (</span><span style="color: #E36209">tag</span><span style="color: #24292E">) </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">return</span><span style="color: #24292E"> tag.</span><span style="color: #6F42C1">startsWith</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;ion-&#39;</span><span style="color: #24292E">)</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>See also</strong> <a href="https://vuejs.org/guide/extras/web-components">Vue and Web Components</a></li></ul><h3 id="app-config-compilerOptions-whitespace"><a href="#app-config-compilerOptions-whitespace" class="headerlink" title="app.config.compilerOptions.whitespace"></a>app.config.compilerOptions.whitespace</h3><p>​Adjusts template whitespace handling behavior.</p><ul><li><p><strong>Type:</strong> <code>&#39;condense&#39; | &#39;preserve&#39;</code></p></li><li><p><strong>Default:</strong> <code>&#39;condense&#39;</code></p></li><li><p><strong>Details</strong></p></li></ul><p>Vue removes &#x2F; condenses whitespace characters in templates to produce more efficient compiled output. The default strategy is “condense”, with the following behavior:</p><ol><li>Leading &#x2F; ending whitespace characters inside an element are condensed into a single space.</li><li>Whitespace characters between elements that contain newlines are removed.</li><li>Consecutive whitespace characters in text nodes are condensed into a single space.</li></ol><p>Setting this option to <code>&#39;preserve&#39;</code> will disable (2) and (3).</p><ul><li><strong>Example</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">app.config.compilerOptions.whitespace </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;preserve&#39;</span></span></code></pre></div></div></figure><h3 id="app-config-compilerOptions-delimiters"><a href="#app-config-compilerOptions-delimiters" class="headerlink" title="app.config.compilerOptions.delimiters"></a>app.config.compilerOptions.delimiters</h3><p>​Adjusts the delimiters used for text interpolation within the template.</p><ul><li><p><strong>Type:</strong> <code>[string, string]</code></p></li><li><p><strong>Default:</strong> <code>[&#39;&#123;&#123;', '&#125;&#125;&#39;]</code></p></li><li><p><strong>Details</strong></p></li></ul><p>This is typically used to avoid conflicting with server-side frameworks that also use mustache syntax.</p><ul><li><strong>Example</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6A737D">// Delimiters changed to ES6 template string style</span></span><span class="line"><span style="color: #24292E">app.config.compilerOptions.delimiters </span><span style="color: #D73A49">=</span><span style="color: #24292E"> [</span><span style="color: #032F62">&#39;${&#39;</span><span style="color: #24292E">, </span><span style="color: #032F62">&#39;}&#39;</span><span style="color: #24292E">]</span></span></code></pre></div></div></figure><h3 id="app-config-compilerOptions-comments"><a href="#app-config-compilerOptions-comments" class="headerlink" title="app.config.compilerOptions.comments"></a>app.config.compilerOptions.comments</h3><p>​Adjusts treatment of HTML comments in templates.</p><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>false</code></p></li><li><p><strong>Details</strong></p></li></ul><p>By default, Vue will remove the comments in production. Setting this option to <code>true</code> will force Vue to preserve comments even in production. Comments are always preserved during development. This option is typically used when Vue is used with other libraries that rely on HTML comments.</p><ul><li><strong>Example</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">app.config.compilerOptions.comments </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">true</span></span></code></pre></div></div></figure><h3 id="app-config-globalProperties"><a href="#app-config-globalProperties" class="headerlink" title="app.config.globalProperties"></a>app.config.globalProperties</h3><p>​An object that can be used to register global properties that can be accessed on any component instance inside the application.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">AppConfig</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #E36209">globalProperties</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Record</span><span style="color: #24292E">&lt;</span><span style="color: #005CC5">string</span><span style="color: #24292E">, </span><span style="color: #005CC5">any</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>Details</strong></li></ul><p>This is a replacement of Vue 2’s <code>Vue.prototype</code> which is no longer present in Vue 3. As with anything global, this should be used sparingly.</p><p>If a global property conflicts with a component’s own property, the component’s own property will have higher priority.</p><ul><li><strong>Usage</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">app.config.globalProperties.msg </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;hello&#39;</span></span></code></pre></div></div></figure><p>This makes <code>msg</code> available inside any component template in the application, and also on <code>this</code> of any component instance:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> </span><span style="color: #D73A49">default</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">mounted</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">    console.</span><span style="color: #6F42C1">log</span><span style="color: #24292E">(</span><span style="color: #005CC5">this</span><span style="color: #24292E">.msg) </span><span style="color: #6A737D">// &#39;hello&#39;</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">}</span></span></code></pre></div></div></figure><ul><li><strong>See also</strong> <a href="https://vuejs.org/guide/typescript/options-api#augmenting-global-properties">Guide - Augmenting Global Properties <code>TS</code></a></li></ul><h3 id="app-config-optionMergeStrategies"><a href="#app-config-optionMergeStrategies" class="headerlink" title="app.config.optionMergeStrategies"></a>app.config.optionMergeStrategies</h3><p>​An object for defining merging strategies for custom component options.</p><ul><li><strong>Type</strong></li></ul><figure class="shiki ts"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">interface</span><span style="color: #24292E"> </span><span style="color: #6F42C1">AppConfig</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #E36209">optionMergeStrategies</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Record</span><span style="color: #24292E">&lt;</span><span style="color: #005CC5">string</span><span style="color: #24292E">, </span><span style="color: #6F42C1">OptionMergeFunction</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">}</span></span><span class="line"></span><span class="line"><span style="color: #D73A49">type</span><span style="color: #24292E"> </span><span style="color: #6F42C1">OptionMergeFunction</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> (</span><span style="color: #E36209">to</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">unknown</span><span style="color: #24292E">, </span><span style="color: #E36209">from</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #005CC5">unknown</span><span style="color: #24292E">) </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">any</span></span></code></pre></div></div></figure><ul><li><strong>Details</strong></li></ul><p>Some plugins &#x2F; libraries add support for custom component options (by injecting global mixins). These options may require special merging logic when the same option needs to be “merged” from multiple sources (e.g. mixins or component inheritance).</p><p>A merge strategy function can be registered for a custom option by assigning it on the <code>app.config.optionMergeStrategies</code> object using the option’s name as the key.</p><p>The merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively.</p><ul><li><strong>Example</strong></li></ul><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">app</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">createApp</span><span style="color: #24292E">({</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// option from self</span></span><span class="line"><span style="color: #24292E">  msg: </span><span style="color: #032F62">&#39;Vue&#39;</span><span style="color: #24292E">,</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// option from a mixin</span></span><span class="line"><span style="color: #24292E">  mixins: [</span></span><span class="line"><span style="color: #24292E">    {</span></span><span class="line"><span style="color: #24292E">      msg: </span><span style="color: #032F62">&#39;Hello &#39;</span></span><span class="line"><span style="color: #24292E">    }</span></span><span class="line"><span style="color: #24292E">  ],</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">mounted</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// merged options exposed on this.$options</span></span><span class="line"><span style="color: #24292E">    console.</span><span style="color: #6F42C1">log</span><span style="color: #24292E">(</span><span style="color: #005CC5">this</span><span style="color: #24292E">.$options.msg)</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">})</span></span><span class="line"></span><span class="line"><span style="color: #6A737D">// define a custom merge strategy for `msg`</span></span><span class="line"><span style="color: #24292E">app.config.optionMergeStrategies.</span><span style="color: #6F42C1">msg</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> (</span><span style="color: #E36209">parent</span><span style="color: #24292E">, </span><span style="color: #E36209">child</span><span style="color: #24292E">) </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">return</span><span style="color: #24292E"> (parent </span><span style="color: #D73A49">||</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;&#39;</span><span style="color: #24292E">) </span><span style="color: #D73A49">+</span><span style="color: #24292E"> (child </span><span style="color: #D73A49">||</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;&#39;</span><span style="color: #24292E">)</span></span><span class="line"><span style="color: #24292E">}</span></span><span class="line"></span><span class="line"><span style="color: #24292E">app.</span><span style="color: #6F42C1">mount</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;#app&#39;</span><span style="color: #24292E">)</span></span><span class="line"><span style="color: #6A737D">// logs &#39;Hello Vue&#39;</span></span></code></pre></div></div></figure><ul><li><strong>See also</strong> <a href="https://vuejs.org/api/component-instance#options">Component Instance - <code>$options</code></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Every application instance exposes a &lt;code&gt;config&lt;/code&gt; object that contains the configuration settings for that application. You can mo</summary>
      
    
    
    
    <category term="Programming" scheme="http://aritlh.github.io/categories/Programming/"/>
    
    <category term="VueJS" scheme="http://aritlh.github.io/categories/Programming/VueJS/"/>
    
    
  </entry>
  
  <entry>
    <title>VueJS #1 Fundamental Topics</title>
    <link href="http://aritlh.github.io/wiki/Programming/VueJS/1-fundamental-topics/"/>
    <id>http://aritlh.github.io/wiki/Programming/VueJS/1-fundamental-topics/</id>
    <published>2024-04-15T09:38:54.000Z</published>
    <updated>2024-04-16T02:15:29.633Z</updated>
    
    <content type="html"><![CDATA[<p>Vue is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS and JavaScript, and provides a declarative and component-based programming model that helps you efficiently develop user interfaces, be it simple or complex.</p><h2 id="What-is-Vue"><a href="#What-is-Vue" class="headerlink" title="What is Vue?"></a>What is Vue?</h2><p>Vue is a JavaScript framework for building interfaces. It buids on top of 3 standards:</p><ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul><p>and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.</p><p>Here is a minimal example:</p><figure class="shiki js"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> { createApp } </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;vue&#39;</span></span><span class="line"></span><span class="line"><span style="color: #6F42C1">createApp</span><span style="color: #24292E">({</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">data</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">      count: </span><span style="color: #005CC5">0</span></span><span class="line"><span style="color: #24292E">    }</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">}).</span><span style="color: #6F42C1">mount</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;#app&#39;</span><span style="color: #24292E">)</span></span></code></pre></div></div></figure><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">div</span><span style="color: #24292E"> </span><span style="color: #6F42C1">id</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;app&quot;</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;button @click=&quot;count++&quot;&gt;</span></span><span class="line"><span style="color: #24292E">    Count is: {{ count }}</span></span><span class="line"><span style="color: #24292E">  &lt;/button&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">div</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><p>The above example demonstrates the two core features of Vue:</p><ul><li><strong>Declarative Rendering:</strong> extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.</li><li><strong>Reactivity:</strong> automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.</li></ul><blockquote><p><strong><em>Prerequisites</em></strong></p><p><em>The rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for JavaScript, HTML and CSS if needed. Prior experience with other frameworks helps, but is not required.</em></p></blockquote><h2 id="The-Progressive-Framework"><a href="#The-Progressive-Framework" class="headerlink" title="The Progressive Framework"></a>The Progressive Framework</h2><p>Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:</p><ul><li>Enhancing static HTML without a build step</li><li>Embedding as Web Components on any page</li><li>Single-Page Application (SPA)</li><li>Fullstack &#x2F; Server-Side Rendering (SSR)</li><li>Jamstack &#x2F; Static Site Generation (SSG)</li><li>Targeting desktop, mobile, WebGL, and even the terminal</li></ul><p>This is why we call Vue “The Progressive Framework”: it’s a framework that can grow with you and adapt to your needs.</p><h2 id="Single-File-Components"><a href="#Single-File-Components" class="headerlink" title="Single-File Components"></a>Single-File Components</h2><p>​In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as <code>*.vue</code> files, abbreviated as SFC). A Vue SFC, as the name suggests, encapsulates the component’s logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here’s the previous example, written in SFC format:</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">script</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> </span><span style="color: #D73A49">default</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">data</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">      count: </span><span style="color: #005CC5">0</span></span><span class="line"><span style="color: #24292E">    }</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">}</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">script</span><span style="color: #24292E">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">template</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;</span><span style="color: #22863A">button</span><span style="color: #24292E"> @</span><span style="color: #6F42C1">click</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">count</span><span style="color: #D73A49">++</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;Count is: {{ count }}&lt;/</span><span style="color: #22863A">button</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">template</span><span style="color: #24292E">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">style</span><span style="color: #24292E"> </span><span style="color: #6F42C1">scoped</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #22863A">button</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #005CC5">font-weight</span><span style="color: #24292E">: </span><span style="color: #005CC5">bold</span><span style="color: #24292E">;</span></span><span class="line"><span style="color: #24292E">}</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">style</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><h2 id="API-Styles"><a href="#API-Styles" class="headerlink" title="API Styles"></a>API Styles</h2><p>Vue components can be authored in two different API styles: <strong>Options API</strong> and <strong>Composition API</strong>.</p><h3 id="Options-API"><a href="#Options-API" class="headerlink" title="Options API"></a>Options API</h3><p>With Options API, we define a component’s logic using an object of options such as <code>data</code>, <code>methods</code>, and <code>mounted</code>. Properties defined by options are exposed on <code>this</code> inside functions, which points to the component instance:</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">script</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> </span><span style="color: #D73A49">default</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// Properties returned from data() become reactive state</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// and will be exposed on `this`.</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">data</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">      count: </span><span style="color: #005CC5">0</span></span><span class="line"><span style="color: #24292E">    }</span></span><span class="line"><span style="color: #24292E">  },</span></span><span class="line"></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// Methods are functions that mutate state and trigger updates.</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// They can be bound as event handlers in templates.</span></span><span class="line"><span style="color: #24292E">  methods: {</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">increment</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">      </span><span style="color: #005CC5">this</span><span style="color: #24292E">.count</span><span style="color: #D73A49">++</span></span><span class="line"><span style="color: #24292E">    }</span></span><span class="line"><span style="color: #24292E">  },</span></span><span class="line"></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// Lifecycle hooks are called at different stages</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// of a component&#39;s lifecycle.</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// This function will be called when the component is mounted.</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">mounted</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">    console.</span><span style="color: #6F42C1">log</span><span style="color: #24292E">(</span><span style="color: #032F62">`The initial count is ${</span><span style="color: #005CC5">this</span><span style="color: #032F62">.</span><span style="color: #24292E">count</span><span style="color: #032F62">}.`</span><span style="color: #24292E">)</span></span><span class="line"><span style="color: #24292E">  }</span></span><span class="line"><span style="color: #24292E">}</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">script</span><span style="color: #24292E">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">template</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;</span><span style="color: #22863A">button</span><span style="color: #24292E"> @</span><span style="color: #6F42C1">click</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">increment</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;Count is: {{ count }}&lt;/</span><span style="color: #22863A">button</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">template</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><h3 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h3><p>With Composition API, we define a component’s logic using imported API functions. In SFCs, Composition API is typically used with <code>&lt;script setup&gt;</code>. The <code>setup</code> attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables &#x2F; functions declared in <code>&lt;script setup&gt;</code> are directly usable in the template.</p><p>Here is the same component, with the exact same template, but using Composition API and <code>&lt;script setup&gt;</code> instead:</p><figure class="shiki vue"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">script</span><span style="color: #24292E"> </span><span style="color: #6F42C1">setup</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> { ref, onMounted } </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;vue&#39;</span></span><span class="line"></span><span class="line"><span style="color: #6A737D">// reactive state</span></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">count</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">ref</span><span style="color: #24292E">(</span><span style="color: #005CC5">0</span><span style="color: #24292E">)</span></span><span class="line"></span><span class="line"><span style="color: #6A737D">// functions that mutate state and trigger updates</span></span><span class="line"><span style="color: #D73A49">function</span><span style="color: #24292E"> </span><span style="color: #6F42C1">increment</span><span style="color: #24292E">() {</span></span><span class="line"><span style="color: #24292E">  count.value</span><span style="color: #D73A49">++</span></span><span class="line"><span style="color: #24292E">}</span></span><span class="line"></span><span class="line"><span style="color: #6A737D">// lifecycle hooks</span></span><span class="line"><span style="color: #6F42C1">onMounted</span><span style="color: #24292E">(() </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> {</span></span><span class="line"><span style="color: #24292E">  console.</span><span style="color: #6F42C1">log</span><span style="color: #24292E">(</span><span style="color: #032F62">`The initial count is ${</span><span style="color: #24292E">count</span><span style="color: #032F62">.</span><span style="color: #24292E">value</span><span style="color: #032F62">}.`</span><span style="color: #24292E">)</span></span><span class="line"><span style="color: #24292E">})</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">script</span><span style="color: #24292E">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #24292E">&lt;</span><span style="color: #22863A">template</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  &lt;</span><span style="color: #22863A">button</span><span style="color: #24292E"> @</span><span style="color: #6F42C1">click</span><span style="color: #24292E">=</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">increment</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">&gt;Count is: {{ count }}&lt;/</span><span style="color: #22863A">button</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">&lt;/</span><span style="color: #22863A">template</span><span style="color: #24292E">&gt;</span></span></code></pre></div></div></figure><h2 id="Which-to-Choose"><a href="#Which-to-Choose" class="headerlink" title="Which to Choose?"></a>Which to Choose?</h2><p>The <strong>Options API:</strong> is centered around the concept of a “component instance” (this as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.</p><p>The <strong>Composition API:</strong> is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.</p><p>Both API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.</p><p>If you are new to Vue, here’s our general recommendation:</p><ul><li>For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.</li><li>For production use:<ul><li>Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.</li><li>Go with Composition API + Single-File Components if you plan to build full applications with Vue.</li></ul></li></ul><p>You don’t have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the <strong>API Preference switches</strong> at the top of the left sidebar.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vue is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS and JavaScript, and provides a declara</summary>
      
    
    
    
    <category term="Programming" scheme="http://aritlh.github.io/categories/Programming/"/>
    
    <category term="VueJS" scheme="http://aritlh.github.io/categories/Programming/VueJS/"/>
    
    
  </entry>
  
  <entry>
    <title>Badstore v1.2.3</title>
    <link href="http://aritlh.github.io/wiki/Hacking%20Walkthrough/Vulnhub/badstore-v123/"/>
    <id>http://aritlh.github.io/wiki/Hacking%20Walkthrough/Vulnhub/badstore-v123/</id>
    <published>2019-02-11T21:14:54.000Z</published>
    <updated>2024-04-15T10:33:35.507Z</updated>
    
    <content type="html"><![CDATA[<p>The following is a vulnhub engine search from 2004. While this website may not be completely safe from advanced attacks, it serves as a valuable learning resource for beginners like me to practice identifying and exploiting common and easy-to-find web application vulnerabilities.</p><p>Boot the machine, then perform host scanning using <code>netdiscover</code>.</p><figure class="shiki shell"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6F42C1">$</span><span style="color: #24292E"> </span><span style="color: #032F62">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">netdiscover</span></span></code></pre></div></div></figure><p>After obtaining the target IP, perform port scanning using <code>nmap</code>.</p><figure class="shiki shell"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6F42C1">$</span><span style="color: #24292E"> </span><span style="color: #032F62">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">nmap</span><span style="color: #24292E"> </span><span style="color: #005CC5">-sSC</span><span style="color: #24292E"> </span><span style="color: #005CC5">-Pn</span><span style="color: #24292E"> </span><span style="color: #D73A49">&lt;</span><span style="color: #032F62">I</span><span style="color: #24292E">P</span><span style="color: #D73A49">&gt;</span></span></code></pre></div></div></figure><ul><li><code>nmap</code>: Calls the Nmap program.</li><li><code>-sS</code>: Performs a TCP SYNC scan, which is a fast and efficient type of port scan.</li><li><code>-C</code>: Enables Nmap’s default script to get more information about the target.</li><li><code>-Pn</code>: Ignores host discovery and continues scanning on the given target, regardless of whether the target responds or not.</li><li><code>&lt;IP&gt;</code>: The IP address of the target to be scanned</li></ul><p>So, this command will perform a TCP SYN port scan on <code>&lt;IP&gt;</code> display the version of Nmap in use, enable Nmap default scripts to gather additional information about the target, and will continue the scan without verifying whether the target is responding or not.</p><p><img src="https://pbs.twimg.com/media/GK6bE6vagAAu4EM?format=jpg&name=large" alt="Scanning The Target"></p><p>we also found MySQL service open, Let’s try to access the database using <strong>root</strong> user.</p><figure class="shiki shell"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #005CC5">...</span></span><span class="line"><span style="color: #6F42C1">PORT</span><span style="color: #24292E">     </span><span style="color: #032F62">STATE</span><span style="color: #24292E"> </span><span style="color: #032F62">SERVICE</span><span style="color: #24292E">  </span><span style="color: #032F62">VERSION</span></span><span class="line"><span style="color: #6F42C1">80/tcp</span><span style="color: #24292E">   </span><span style="color: #032F62">open</span><span style="color: #24292E">  </span><span style="color: #032F62">http</span><span style="color: #24292E">     </span><span style="color: #032F62">Apache</span><span style="color: #24292E"> </span><span style="color: #032F62">httpd</span><span style="color: #24292E"> </span><span style="color: #005CC5">1.3</span><span style="color: #032F62">.28</span><span style="color: #24292E"> ((Unix) mod_ssl/2.8.15 OpenSSL/0.9.7c)</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">http-robots.txt:</span><span style="color: #24292E"> </span><span style="color: #005CC5">5</span><span style="color: #24292E"> </span><span style="color: #032F62">disallowed</span><span style="color: #24292E"> </span><span style="color: #032F62">entries</span><span style="color: #24292E"> </span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #6F42C1">_/cgi-bin</span><span style="color: #24292E"> </span><span style="color: #032F62">/scanbot</span><span style="color: #24292E"> </span><span style="color: #032F62">/backup</span><span style="color: #24292E"> </span><span style="color: #032F62">/supplier</span><span style="color: #24292E"> </span><span style="color: #032F62">/upload</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #6F42C1">_http-server-header:</span><span style="color: #24292E"> </span><span style="color: #032F62">Apache/1.3.28</span><span style="color: #24292E"> (Unix) mod_ssl/2.8.15 OpenSSL/0.9.7c</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #6F42C1">_http-title:</span><span style="color: #24292E"> </span><span style="color: #032F62">Welcome</span><span style="color: #24292E"> </span><span style="color: #032F62">to</span><span style="color: #24292E"> </span><span style="color: #032F62">BadStore.net</span><span style="color: #24292E"> </span><span style="color: #032F62">v1.2.3s</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">http-methods:</span><span style="color: #24292E"> </span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #6F42C1">_</span><span style="color: #24292E">  </span><span style="color: #032F62">Potentially</span><span style="color: #24292E"> </span><span style="color: #032F62">risky</span><span style="color: #24292E"> </span><span style="color: #032F62">methods:</span><span style="color: #24292E"> </span><span style="color: #032F62">TRACE</span></span><span class="line"><span style="color: #6F42C1">443/tcp</span><span style="color: #24292E">  </span><span style="color: #032F62">open</span><span style="color: #24292E">  </span><span style="color: #032F62">ssl/http</span><span style="color: #24292E"> </span><span style="color: #032F62">Apache</span><span style="color: #24292E"> </span><span style="color: #032F62">httpd</span><span style="color: #24292E"> </span><span style="color: #005CC5">1.3</span><span style="color: #032F62">.28</span><span style="color: #24292E"> ((Unix) mod_ssl/2.8.15 OpenSSL/0.9.7c)</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">sslv2:</span><span style="color: #24292E"> </span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E">   </span><span style="color: #6F42C1">SSLv2</span><span style="color: #24292E"> </span><span style="color: #032F62">supported</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E">   </span><span style="color: #6F42C1">ciphers:</span><span style="color: #24292E"> </span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E">     </span><span style="color: #6F42C1">SSL2_RC4_128_EXPORT40_WITH_MD5</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E">     </span><span style="color: #6F42C1">SSL2_RC4_64_WITH_MD5</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E">     </span><span style="color: #6F42C1">SSL2_DES_192_EDE3_CBC_WITH_MD5</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E">     </span><span style="color: #6F42C1">SSL2_RC2_128_CBC_WITH_MD5</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E">     </span><span style="color: #6F42C1">SSL2_IDEA_128_CBC_WITH_MD5</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E">     </span><span style="color: #6F42C1">SSL2_DES_64_CBC_WITH_MD5</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E">     </span><span style="color: #6F42C1">SSL2_RC4_128_WITH_MD5</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #6F42C1">_</span><span style="color: #24292E">    </span><span style="color: #032F62">SSL2_RC2_128_CBC_EXPORT40_WITH_MD5</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">ssl-cert:</span><span style="color: #24292E"> </span><span style="color: #032F62">Subject:</span><span style="color: #24292E"> </span><span style="color: #032F62">commonName=www.badstore.net/organizationName=BadStore.net/stateOrProvinceName=Illinois/countryName=US</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Subject</span><span style="color: #24292E"> </span><span style="color: #032F62">Alternative</span><span style="color: #24292E"> </span><span style="color: #032F62">Name:</span><span style="color: #24292E"> </span><span style="color: #032F62">email:root@badstore.net</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Not</span><span style="color: #24292E"> </span><span style="color: #032F62">valid</span><span style="color: #24292E"> </span><span style="color: #032F62">before:</span><span style="color: #24292E"> </span><span style="color: #005CC5">2006</span><span style="color: #032F62">-05-10T12:52:53</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #6F42C1">_Not</span><span style="color: #24292E"> </span><span style="color: #032F62">valid</span><span style="color: #24292E"> </span><span style="color: #032F62">after:</span><span style="color: #24292E">  </span><span style="color: #005CC5">2009</span><span style="color: #032F62">-02-02T12:52:53</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #6F42C1">_http-server-header:</span><span style="color: #24292E"> </span><span style="color: #032F62">Apache/1.3.28</span><span style="color: #24292E"> (Unix) mod_ssl/2.8.15 OpenSSL/0.9.7c</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #6F42C1">_ssl-date:</span><span style="color: #24292E"> </span><span style="color: #005CC5">2024</span><span style="color: #032F62">-02-20T12:53:57+00:00</span><span style="color: #24292E">; </span><span style="color: #6F42C1">-1d01h58m15s</span><span style="color: #24292E"> </span><span style="color: #032F62">from</span><span style="color: #24292E"> </span><span style="color: #032F62">scanner</span><span style="color: #24292E"> </span><span style="color: #032F62">time.</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #6F42C1">_http-title:</span><span style="color: #24292E"> </span><span style="color: #032F62">Welcome</span><span style="color: #24292E"> </span><span style="color: #032F62">to</span><span style="color: #24292E"> </span><span style="color: #032F62">BadStore.net</span><span style="color: #24292E"> </span><span style="color: #032F62">v1.2.3s</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">http-robots.txt:</span><span style="color: #24292E"> </span><span style="color: #005CC5">5</span><span style="color: #24292E"> </span><span style="color: #032F62">disallowed</span><span style="color: #24292E"> </span><span style="color: #032F62">entries</span><span style="color: #24292E"> </span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #6F42C1">_/cgi-bin</span><span style="color: #24292E"> </span><span style="color: #032F62">/scanbot</span><span style="color: #24292E"> </span><span style="color: #032F62">/backup</span><span style="color: #24292E"> </span><span style="color: #032F62">/supplier</span><span style="color: #24292E"> </span><span style="color: #032F62">/upload</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">http-methods:</span><span style="color: #24292E"> </span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #6F42C1">_</span><span style="color: #24292E">  </span><span style="color: #032F62">Potentially</span><span style="color: #24292E"> </span><span style="color: #032F62">risky</span><span style="color: #24292E"> </span><span style="color: #032F62">methods:</span><span style="color: #24292E"> </span><span style="color: #032F62">TRACE</span></span><span class="line"><span style="color: #6F42C1">3306/tcp</span><span style="color: #24292E"> </span><span style="color: #032F62">open</span><span style="color: #24292E">  </span><span style="color: #032F62">mysql</span><span style="color: #24292E">    </span><span style="color: #032F62">MySQL</span><span style="color: #24292E"> </span><span style="color: #005CC5">4.1</span><span style="color: #032F62">.7-standard</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">mysql-info:</span><span style="color: #24292E"> </span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E">   </span><span style="color: #6F42C1">Protocol:</span><span style="color: #24292E"> </span><span style="color: #005CC5">10</span></span><span class="line"><span style="color: #D73A49">|</span><span style="color: #24292E">   </span><span style="color: #6F42C1">Version:</span><span style="color: #24292E"> </span><span style="color: #005CC5">4.1</span><span style="color: #032F62">.7-standard</span></span><span class="line"><span style="color: #005CC5">...</span></span></code></pre></div></div></figure><figure class="shiki shell"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6F42C1">$</span><span style="color: #24292E"> </span><span style="color: #032F62">mysql</span><span style="color: #24292E"> </span><span style="color: #005CC5">-h</span><span style="color: #24292E"> </span><span style="color: #D73A49">&lt;</span><span style="color: #032F62">I</span><span style="color: #24292E">P</span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">-u</span><span style="color: #24292E"> </span><span style="color: #032F62">root</span><span style="color: #24292E"> </span><span style="color: #005CC5">-p</span></span></code></pre></div></div></figure><p>From this exposed Database we are able to obtain:</p><p><img src="https://pbs.twimg.com/media/GK7ASVmaoAAYv1R?format=png&name=medium" alt="Successfully Accessed The Database."></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The following is a vulnhub engine search from 2004. While this website may not be completely safe from advanced attacks, it serves as a v</summary>
      
    
    
    
    <category term="Hacking Walkthrough" scheme="http://aritlh.github.io/categories/Hacking-Walkthrough/"/>
    
    <category term="Vulnhub" scheme="http://aritlh.github.io/categories/Hacking-Walkthrough/Vulnhub/"/>
    
    
  </entry>
  
  <entry>
    <title>Git commit message 基本规范</title>
    <link href="http://aritlh.github.io/wiki/Technology%20Development/Git/git-commit-message-basic-specifications/"/>
    <id>http://aritlh.github.io/wiki/Technology%20Development/Git/git-commit-message-basic-specifications/</id>
    <published>2019-02-11T21:14:54.000Z</published>
    <updated>2024-04-15T10:33:27.310Z</updated>
    
    <content type="html"><![CDATA[<p>When using git to commit a version, the commit message is very important, as you need to be able to look back at the commit log and see what was changed each time.</p><p>When we write this commit message, we should follow a certain structure to help us standardize and clarify our thinking.</p><p>We generally follow the <a href="https://github.com/thoughtbot/dotfiles/blob/master/gitmessage"><strong>thoughtbot specification</strong></a>, and here are their instructions <a href="https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message">5 Useful Tips For A Better Commit Message</a>.</p><figure class="shiki bash"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6F42C1">50-character</span><span style="color: #24292E"> </span><span style="color: #032F62">subject</span><span style="color: #24292E"> </span><span style="color: #032F62">line</span></span><span class="line"><span style="color: #6F42C1">72-character</span><span style="color: #24292E"> </span><span style="color: #032F62">wrapped</span><span style="color: #24292E"> </span><span style="color: #032F62">longer</span><span style="color: #24292E"> </span><span style="color: #032F62">description.</span><span style="color: #24292E"> </span><span style="color: #032F62">This</span><span style="color: #24292E"> </span><span style="color: #032F62">should</span><span style="color: #24292E"> </span><span style="color: #032F62">answer.</span></span><span class="line"><span style="color: #D73A49">*</span><span style="color: #24292E"> Why was this change necessary</span><span style="color: #D73A49">?</span></span><span class="line"><span style="color: #D73A49">*</span><span style="color: #24292E"> Why was this change necessary</span><span style="color: #D73A49">?</span><span style="color: #24292E"> </span><span style="color: #D73A49">*</span><span style="color: #24292E"> How does it address the problem</span><span style="color: #D73A49">?</span></span><span class="line"><span style="color: #D73A49">*</span><span style="color: #24292E"> How does it address the problem</span><span style="color: #D73A49">?</span><span style="color: #24292E"> </span><span style="color: #D73A49">*</span><span style="color: #24292E"> Are there any side effects</span><span style="color: #D73A49">?</span></span><span class="line"><span style="color: #6F42C1">Include</span><span style="color: #24292E"> </span><span style="color: #032F62">a</span><span style="color: #24292E"> </span><span style="color: #032F62">link</span><span style="color: #24292E"> </span><span style="color: #032F62">to</span><span style="color: #24292E"> </span><span style="color: #032F62">the</span><span style="color: #24292E"> </span><span style="color: #032F62">ticket,</span><span style="color: #24292E"> </span><span style="color: #032F62">if</span><span style="color: #24292E"> </span><span style="color: #032F62">any.</span></span></code></pre></div></div></figure><p>Simply put:</p><ol><li>the first line should be no more than 50 characters. 2.</li><li>the second line is a blank line</li><li>the third line begins with a descriptive message, each line should be no more than 72 characters in length, with a serial number and no period at the end</li><li>the descriptive information starting on the third line is the main description:<ul><li>What changes were made to this submission?</li><li>What changes have been made to this submission? How is the problem being solved?</li><li>How does it address the problem? Will it affect anything?</li></ul></li><li>After the descriptive message, either leave a blank line and close the issue or give a link to the appropriate ticket.</li></ol><p>Example:</p><figure class="shiki bash"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div><div class="code"><pre class="shiki github-light"><code><span class="line"><span style="color: #6F42C1">fix($compile</span><span style="color: #24292E">): couple of unit tests </span><span style="color: #D73A49">for</span><span style="color: #24292E"> IE9</span></span><span class="line"></span><span class="line"><span style="color: #6F42C1">1.</span><span style="color: #24292E"> </span><span style="color: #032F62">Older</span><span style="color: #24292E"> </span><span style="color: #032F62">IEs</span><span style="color: #24292E"> </span><span style="color: #032F62">serialize</span><span style="color: #24292E"> </span><span style="color: #032F62">html</span><span style="color: #24292E"> </span><span style="color: #032F62">uppercased,</span><span style="color: #24292E"> </span><span style="color: #032F62">but</span><span style="color: #24292E"> </span><span style="color: #032F62">IE9</span><span style="color: #24292E"> </span><span style="color: #032F62">does</span><span style="color: #24292E"> </span><span style="color: #032F62">not...</span></span><span class="line"><span style="color: #6F42C1">2.</span><span style="color: #24292E"> </span><span style="color: #032F62">would</span><span style="color: #24292E"> </span><span style="color: #032F62">be</span><span style="color: #24292E"> </span><span style="color: #032F62">better</span><span style="color: #24292E"> </span><span style="color: #032F62">to</span><span style="color: #24292E"> </span><span style="color: #032F62">expect</span><span style="color: #24292E"> </span><span style="color: #032F62">case</span><span style="color: #24292E"> </span><span style="color: #032F62">insensitive,</span><span style="color: #24292E"> </span><span style="color: #032F62">unfortunately</span><span style="color: #24292E"> </span><span style="color: #032F62">jasmine</span><span style="color: #24292E"> </span><span style="color: #032F62">does</span></span><span class="line"><span style="color: #6F42C1">3.</span><span style="color: #24292E"> </span><span style="color: #032F62">not</span><span style="color: #24292E"> </span><span style="color: #032F62">allow</span><span style="color: #24292E"> </span><span style="color: #032F62">to</span><span style="color: #24292E"> </span><span style="color: #032F62">user</span><span style="color: #24292E"> </span><span style="color: #032F62">regexps</span><span style="color: #24292E"> </span><span style="color: #032F62">for</span><span style="color: #24292E"> </span><span style="color: #032F62">throw</span><span style="color: #24292E"> </span><span style="color: #032F62">expectations</span></span><span class="line"></span><span class="line"><span style="color: #6F42C1">Closes</span><span style="color: #24292E"> </span><span style="color: #6A737D">#392</span></span><span class="line"><span style="color: #6F42C1">Breaks</span><span style="color: #24292E"> </span><span style="color: #032F62">foo.bar</span><span style="color: #24292E"> </span><span style="color: #032F62">api,</span><span style="color: #24292E"> </span><span style="color: #032F62">foo.baz</span><span style="color: #24292E"> </span><span style="color: #032F62">should</span><span style="color: #24292E"> </span><span style="color: #032F62">be</span><span style="color: #24292E"> </span><span style="color: #032F62">used</span><span style="color: #24292E"> </span><span style="color: #032F62">instead</span></span></code></pre></div></div></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When using git to commit a version, the commit message is very important, as you need to be able to look back at the commit log and see w</summary>
      
    
    
    
    <category term="Technology Development" scheme="http://aritlh.github.io/categories/Technology-Development/"/>
    
    <category term="Git" scheme="http://aritlh.github.io/categories/Technology-Development/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Welcome Aritlh&#39;s Wiki Site</title>
    <link href="http://aritlh.github.io/wiki/index/"/>
    <id>http://aritlh.github.io/wiki/index/</id>
    <published>2017-01-22T21:14:54.000Z</published>
    <updated>2024-04-15T14:33:49.447Z</updated>
    
    <content type="html"><![CDATA[<p>This is Aritlh’s personal Wiki site, mainly recording some scattered knowledge points summarized from his own words.</p><p>I’ve always felt that <strong>knowledge should not be fragmented, but structured</strong>. So I hope to find an elegant way to manage my knowledge.</p><p>I have learned about or tried methods such as OneNote, Evernote, Blogs, Wikis, etc. and summarized a set of processes for knowledge acquisition, absorption, and management that I think is relatively reasonable:</p><ol><li>Use web pages, RSS, WeChat, and other online channels as sources of knowledge acquisition.</li><li>Use a note-taking system (handwritten notes, OneNote, Evernote) to initially filter valuable and targeted information, <strong>bookmark</strong> information, <strong>classify and organize</strong> it, and take notes on the <strong>key points</strong> after reading.</li><li>For the occasional one or two sentences, or very scattered ideas, inspirations, and initially digested content that come to mind, record them in a <strong>Wiki</strong>.</li><li>Finally, when there is a certain amount of content in a section of the Wiki, re-read the notes and content in that section of the Wiki, refine and distill them, add your own thoughts and understanding, and write an article to be published on a <strong>blog</strong>.</li></ol><p>In practice, the <strong>note-taking system</strong> is mainly for <strong>classifying and organizing</strong> large chunks of information, the <strong>Wiki</strong> is mainly for <strong>accumulating</strong> scattered knowledge, and the <strong>blog</strong> is only for the <strong>essence</strong>.</p><p>When a section of the Wiki is first created, there may be very little content or just a sentence. But through this process, as you encounter more and more about that topic, the scattered knowledge also increases, and the content recorded in that section of the Wiki will also increase, which is to <strong>structure and organize what was originally a large amount of fragmented knowledge through accumulation</strong>.</p><p>The purpose of the blog is to <strong>share and showcase</strong> your knowledge and demonstrate your level of expertise. It needs to present something substantial, so it is not suitable for scattered snippets of knowledge. It is more suitable for presenting a <strong>series</strong> of summaries or tutorials, as a highly systematic knowledge platform.</p><p>When I tried to deploy my own Wiki system, I started to struggle with choosing which Wiki system to use. Referring to online blogs, I actually deployed and compared several popular Wiki systems: MediaWiki, DokuWiki, MDwiki, TiddlyWiki, wiz, vimwiki, Simiki, Wikitten, etc. None of them were satisfactory. Some were difficult and complex to deploy, some had ugly interfaces, some couldn’t have nested categories, some nested categories couldn’t be expanded, some couldn’t search, and some even didn’t use Markdown…</p><p>Based on these unsatisfactory user experiences, I summarized some of my requirements for a <strong>personal Wiki</strong>:</p><ul><li>Simple and beautiful interface with a friendly font and layout</li><li>Support for multi-level categorization</li><li>Easy to modify and update content</li><li>Simple deployment</li><li>Category directories can be expanded and collapsed</li><li>When a category is expanded, you can view the titles of all articles&#x2F;entries under that category</li><li>Each article&#x2F;entry can be assigned multiple categories&#x2F;tags</li><li>The Wiki should support internal linking</li><li>Use Markdown to write articles&#x2F;entries</li><li>Support full-text search (searchable content and titles)</li></ul><p>In my previous usage, Wikitten was the closest to my needs, but there were still some conditions that were not met, such as deployment and search. But personally, I liked the style of Wikitten.</p><p>So in the end, I chose to mimic the style of Wikitten and write this Hexo-based Wiki theme hexo-theme-Wikitten as my own Wiki system, which basically implements the above requirements. Now I’m using it for myself for the time being, of course, this initial functionality is still very simple, and there is a bunch of bugs and TODO lists that need to be maintained. I welcome anyone interested to submit PRs.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is Aritlh’s personal Wiki site, mainly recording some scattered knowledge points summarized from his own words.&lt;/p&gt;
&lt;p&gt;I’ve always f</summary>
      
    
    
    
    
  </entry>
  
</feed>
