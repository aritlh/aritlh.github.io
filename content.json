{"pages":[{"title":"Categories","date":"2024-04-15T07:00:05.974Z","path":"categories/index.html","text":""},{"title":"About","date":"2024-04-15T07:00:05.974Z","path":"about/index.html","text":""},{"title":"Tags","date":"2024-04-15T07:00:05.974Z","path":"tags/index.html","text":""}],"posts":[{"title":"Git commit message 基本规范","date":"2019-02-11T21:14:54.000Z","path":"wiki/Technology Development/Git/git-commit-message-basic-specifications/","text":"When using git to commit a version, the commit message is very important, as you need to be able to look back at the commit log and see what was changed each time. When we write this commit message, we should follow a certain structure to help us standardize and clarify our thinking. We generally follow the thoughtbot specification, and here are their instructions 5 Useful Tips For A Better Commit Message. 12345650-character subject line72-character wrapped longer description. This should answer.* Why was this change necessary?* Why was this change necessary? * How does it address the problem?* How does it address the problem? * Are there any side effects?Include a link to the ticket, if any. Simply put: the first line should be no more than 50 characters. 2. the second line is a blank line the third line begins with a descriptive message, each line should be no more than 72 characters in length, with a serial number and no period at the end the descriptive information starting on the third line is the main description: What changes were made to this submission? What changes have been made to this submission? How is the problem being solved? How does it address the problem? Will it affect anything? After the descriptive message, either leave a blank line and close the issue or give a link to the appropriate ticket. Example: 12345678fix($compile): couple of unit tests for IE91. Older IEs serialize html uppercased, but IE9 does not...2. would be better to expect case insensitive, unfortunately jasmine does3. not allow to user regexps for throw expectationsCloses #392Breaks foo.bar api, foo.baz should be used instead","tags":[{"name":"Git","slug":"Git","permalink":"http://aritlh.github.io/tags/Git/"}],"categories":[{"name":"Technology Development","slug":"Technology-Development","permalink":"http://aritlh.github.io/categories/Technology-Development/"},{"name":"Git","slug":"Technology-Development/Git","permalink":"http://aritlh.github.io/categories/Technology-Development/Git/"}]},{"title":"Welcome Aritlh's Wiki Site","date":"2017-01-22T21:14:54.000Z","path":"wiki/index/","text":"This is Aritlh’s personal Wiki site, mainly recording some scattered knowledge points summarized from his own words. I’ve always felt that knowledge should not be fragmented, but structured. So I hope to find an elegant way to manage my knowledge. I have learned about or tried methods such as OneNote, Evernote, Blogs, Wikis, etc. and summarized a set of processes for knowledge acquisition, absorption, and management that I think is relatively reasonable: Use web pages, RSS, WeChat, and other online channels as sources of knowledge acquisition. Use a note-taking system (handwritten notes, OneNote, Evernote) to initially filter valuable and targeted information, bookmark information, classify and organize it, and take notes on the key points after reading. For the occasional one or two sentences, or very scattered ideas, inspirations, and initially digested content that come to mind, record them in a Wiki. Finally, when there is a certain amount of content in a section of the Wiki, re-read the notes and content in that section of the Wiki, refine and distill them, add your own thoughts and understanding, and write an article to be published on a blog. In practice, the note-taking system is mainly for classifying and organizing large chunks of information, the Wiki is mainly for accumulating scattered knowledge, and the blog is only for the essence. When a section of the Wiki is first created, there may be very little content or just a sentence. But through this process, as you encounter more and more about that topic, the scattered knowledge also increases, and the content recorded in that section of the Wiki will also increase, which is to structure and organize what was originally a large amount of fragmented knowledge through accumulation. The purpose of the blog is to share and showcase your knowledge and demonstrate your level of expertise. It needs to present something substantial, so it is not suitable for scattered snippets of knowledge. It is more suitable for presenting a series of summaries or tutorials, as a highly systematic knowledge platform. When I tried to deploy my own Wiki system, I started to struggle with choosing which Wiki system to use. Referring to online blogs, I actually deployed and compared several popular Wiki systems: MediaWiki, DokuWiki, MDwiki, TiddlyWiki, wiz, vimwiki, Simiki, Wikitten, etc. None of them were satisfactory. Some were difficult and complex to deploy, some had ugly interfaces, some couldn’t have nested categories, some nested categories couldn’t be expanded, some couldn’t search, and some even didn’t use Markdown… Based on these unsatisfactory user experiences, I summarized some of my requirements for a personal Wiki: Simple and beautiful interface with a friendly font and layout Support for multi-level categorization Easy to modify and update content Simple deployment Category directories can be expanded and collapsed When a category is expanded, you can view the titles of all articles&#x2F;entries under that category Each article&#x2F;entry can be assigned multiple categories&#x2F;tags The Wiki should support internal linking Use Markdown to write articles&#x2F;entries Support full-text search (searchable content and titles) In my previous usage, Wikitten was the closest to my needs, but there were still some conditions that were not met, such as deployment and search. But personally, I liked the style of Wikitten. So in the end, I chose to mimic the style of Wikitten and write this Hexo-based Wiki theme hexo-theme-Wikitten as my own Wiki system, which basically implements the above requirements. Now I’m using it for myself for the time being, of course, this initial functionality is still very simple, and there is a bunch of bugs and TODO lists that need to be maintained. I welcome anyone interested to submit PRs.","tags":[],"categories":[]}],"categories":[{"name":"Technology Development","slug":"Technology-Development","permalink":"http://aritlh.github.io/categories/Technology-Development/"},{"name":"Git","slug":"Technology-Development/Git","permalink":"http://aritlh.github.io/categories/Technology-Development/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://aritlh.github.io/tags/Git/"}]}