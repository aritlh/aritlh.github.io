{"pages":[{"title":"Categories","date":"2024-04-15T02:43:03.670Z","path":"categories/index.html","text":""},{"title":"About","date":"2024-04-15T02:43:03.670Z","path":"about/index.html","text":"Hello"},{"title":"Tags","date":"2024-04-15T02:43:03.670Z","path":"tags/index.html","text":""}],"posts":[{"title":"Badstore v1.2.3 Walkthrough","date":"2024-04-09T18:55:57.000Z","path":"wiki/Hacking/CTFs Walkthrough/Vulnhub/badstore-walkthrough/","text":"Doing Reconnaissance and EnumerationBoot the machine and run netdiscover with sudo to getting host information. 1$ sudo netdiscover after getting the target IP, perform scanning using nmap. 1$ sudo nmap -sSC -nP &lt;IP&gt; sudo: This is the command to gain root privileges or administrators privileges. Nmap requires privileges to perform certain scans. nmap: This is a popular network and port scanning utility. -sS: This option indicates to perform a TCP SYN Scan, which is one of the more intelligent types of port scans and harder to detect. -C: This option enables default script scanning. This script is used to gather more information about the detected services.-Pn: This option instructs Nmap not to perform host discovery and scan the given IP address directly. &lt;IP&gt;: This is the target IP address to be scanned. This would come under the MITRE ATT&amp;CK technique of Unsecured Credentials (T1552), which is a sub-technique of Credential Access (TA0006) If we look carefully after scanning the network, there’s a mysql port open there. 1234567891011...|_/cgi-bin /scanbot /backup /supplier /upload| http-methods: |_ Potentially risky methods: TRACE3306/tcp open mysql MySQL 4.1.7-standard &lt;&lt;--- look at this| mysql-info: | Protocol: 10| Version: 4.1.7-standard| Thread ID: 20| Capabilities flags: 33324... Let’s try to access the database using root user. 1$ mariadb -h &lt;IP&gt; -u root -p the Master System Administrator user looks interesting, the passwd looks like md5 hash. look for any md5 decoder on google.","tags":[{"name":"Vulnhub","slug":"Vulnhub","permalink":"http://aritlh.github.io/tags/Vulnhub/"}],"categories":[{"name":"Hacking","slug":"Hacking","permalink":"http://aritlh.github.io/categories/Hacking/"},{"name":"CTFs Walkthrough","slug":"Hacking/CTFs-Walkthrough","permalink":"http://aritlh.github.io/categories/Hacking/CTFs-Walkthrough/"},{"name":"Vulnhub","slug":"Hacking/CTFs-Walkthrough/Vulnhub","permalink":"http://aritlh.github.io/categories/Hacking/CTFs-Walkthrough/Vulnhub/"}]},{"title":"Scavanger Hunt","date":"2024-03-23T07:55:57.000Z","path":"wiki/Hacking/CTFs Walkthrough/picoCTF/scavanger-hunt/","text":"Hints You should have enough hints to find the files, don’t run a brute forcer. Targethttp://mercury.picoctf.net:44070/ ApproachThe target looks like this: And some of info we got was from here: &#123; linenos1234&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mycss.css&quot; /&gt;&lt;script type=&quot;application/javascript&quot; src=&quot;myjs.js&quot;&gt;&lt;/script&gt;&lt;!-- Here&#x27;s the first part of the flag: picoCTF&#123;t --&gt; We think that there must be something inside mycss.css file and myjs.js file. Why don’t we try to open both? Inside the mycss.css we’ve found part 2 of the flag. But we didn’t find the hardcoded part of the flag code in the myjs.js file. But if we recall, the CTF game is full puzzles, and there should be a clue in the myjs.js file. Take a look at the bottom comment in the myjs.js file, and we know that the sentence /* How can I keep Google from indexing my website? */ is a search keyword lmao. &#123; linenos123456789101112131415161718192021function openTab(tabName, elmnt, color) &#123; var i, tabcontent, tablinks; tabcontent = document.getElementsByClassName(&quot;tabcontent&quot;); for (i = 0; i &lt; tabcontent.length; i++) &#123; tabcontent[i].style.display = &quot;none&quot;; &#125; tablinks = document.getElementsByClassName(&quot;tablink&quot;); for (i = 0; i &lt; tablinks.length; i++) &#123; tablinks[i].style.backgroundColor = &quot;&quot;; &#125; document.getElementById(tabName).style.display = &quot;block&quot;; if (elmnt.style != null) &#123; elmnt.style.backgroundColor = color; &#125;&#125;window.onload = function () &#123; openTab(&quot;tabintro&quot;, this, &quot;#222&quot;);&#125;;/* How can I keep Google from indexing my website? */ Reffering to indexing, namely robots.txt, perhaps we should see if there is anything in there. Thanks GOD, part 3 of the flag has been found. however, the closing bracket isn’t written there. Meaning there’s still the next part to be found. Next step, we must find the next part with the keyword is an apache server. I was wondering if that meant .htaccess? Okay, right. And the last one is Store, and I know it will refer to the .DS_Store path. Summaryrobots.txtRobots.txt is a text file used by webmasters to instruct search engine crawlers (such as Googlebot) about which parts of a website should be indexed (given to search engines) and which should not be indexed. In the context of hacking, robots.txt can often provide useful insights to attackers. While information about what should not be indexed may not always be confidential, sometimes the information included in robots.txt can provide clues about the structure of sites, subdomains, or directories that may be attractive targets for attackers. Attackers often use this information to identify areas that may be vulnerable or important in an attack. .htaccessThe .htaccess file is a configuration file used on Apache-based web servers. It allows users to control the server configuration for a specific directory directly through a text file. In a hacking context, attackers often look for unencrypted or vulnerable .htaccess files to take control of the server or change the server configuration unauthorisedly. Poorly configured or vulnerable .htaccess files can be leveraged by attackers to perform attacks such as redirect phishing, file access exploits, or even uploading malicious scripts. .DS_StoreA .DS_Store file is a metadata file created by the macOS operating system to store display preferences and folder settings. While essentially harmless, in a hacking context, .DS_Store files can provide valuable information to attackers, especially if they are in a file sharing environment. .DS_Store files often store information about the files and folders within them, including the directory structure and filenames, which can give attackers insight into how the system is organised and structured. Attackers can utilise this information to plan attacks, locate sensitive files, or identify areas that may be targeted in further penetration attempts.","tags":[{"name":"picoCTF","slug":"picoCTF","permalink":"http://aritlh.github.io/tags/picoCTF/"}],"categories":[{"name":"Hacking","slug":"Hacking","permalink":"http://aritlh.github.io/categories/Hacking/"},{"name":"CTFs Walkthrough","slug":"Hacking/CTFs-Walkthrough","permalink":"http://aritlh.github.io/categories/Hacking/CTFs-Walkthrough/"},{"name":"picoCTF","slug":"Hacking/CTFs-Walkthrough/picoCTF","permalink":"http://aritlh.github.io/categories/Hacking/CTFs-Walkthrough/picoCTF/"}]},{"title":"PW Crack 5","date":"2024-03-20T15:55:57.000Z","path":"wiki/Hacking/CTFs Walkthrough/picoCTF/pw-crack-5/","text":"Hints Can you crack the password to get the flag? Download the password checker here and you’ll need the encrypted flag and the hash in the same directory too. Here’s a dictionary with all possible passwords based on the password conventions we’ve seen so far. Approach we must create a new code from this reference. line 12 read directory.txt file line 14-17 validating password in directory.txt file. &#123; linenos1234567891011121314151617import hashlibcorrect_pw_hash = open(&#x27;level5.hash.bin&#x27;, &#x27;rb&#x27;).read()def hash_pw(pw_str): pw_bytes = bytearray() pw_bytes.extend(pw_str.encode()) m = hashlib.md5() m.update(pw_bytes) return m.digest()post_pw_list = open(&#x27;dictionary.txt&#x27;, &#x27;r&#x27;).read().splitlines()for pw in post_pw_list: if hash_pw(pw) == correct_pw_hash: print(&#x27;This is your password: &#x27; + pw) break run this code: 1$ python3 crack.py SummaryThis code is a password cracker that uses a dictionary attack to find a password. It imports the hashlib module to generate MD5 hashes of passwords. The correct password hash is read from a binary file level5.hash.bin and stored in the correct_pw_hash variable. The hash_pw function takes a string password, converts it to bytearray, hashes it using MD5, and returns the digest. A list of potential passwords is read from a text file dictionary.txt and stored in the post_pw_list variable. The code loops through each password in the post_pw_list list, hashes it using the hash_pw function, and compares it to the correct password hash. If a hashed password matches the correct password hash, the code prints the password and breaks the loop, effectively finding the correct password by brute-forcing it with a list of potential passwords.","tags":[{"name":"picoCTF","slug":"picoCTF","permalink":"http://aritlh.github.io/tags/picoCTF/"}],"categories":[{"name":"Hacking","slug":"Hacking","permalink":"http://aritlh.github.io/categories/Hacking/"},{"name":"CTFs Walkthrough","slug":"Hacking/CTFs-Walkthrough","permalink":"http://aritlh.github.io/categories/Hacking/CTFs-Walkthrough/"},{"name":"picoCTF","slug":"Hacking/CTFs-Walkthrough/picoCTF","permalink":"http://aritlh.github.io/categories/Hacking/CTFs-Walkthrough/picoCTF/"}]},{"title":"PW Crack 3","date":"2024-03-03T07:21:12.000Z","path":"wiki/Hacking/CTFs Walkthrough/picoCTF/pw-crack-3/","text":"Hints Can you crack the password to get the flag? Download the password checker here and you’ll need the encrypted flag and the hash in the same directory too. There are 7 potential passwords with 1 being correct. You can find these by examining the password checker script. Approach We can try to crack the password using the list of possible passwords. hashlib is library to hash the passwords and compare them to the hash file. We will create a new crack code to compare hashes. 12345678910111213141516import hashlibcorrect_pw_hash = open(&#x27;level3.hash.bin&#x27;, &#x27;rb&#x27;).read()def hash_pw(pw_str): pw_bytes = bytearray() pw_bytes.extend(pw_str.encode()) m = hashlib.md5() m.update(pw_bytes) return m.digest()pos_pw_list = [&quot;6997&quot;, &quot;3ac8&quot;, &quot;f0ac&quot;, &quot;4b17&quot;, &quot;ec27&quot;, &quot;4e66&quot;, &quot;865e&quot;]for pw in pos_pw_list: if hash_pw(pw) == correct_pw_hash: print(&quot;The password is: &quot; + pw) running command: 123$ python3 crack.pyThe password is: 865e SummaryDescribes an approach to solving the challenge by utilising the hashlib library in Python to hash possible passwords and compare them to the provided hashes. A Python script is provided to iterate through the list of possible passwords and hash them, then compare the hashes to the provided hash file. Upon successful comparison, the correct password will be revealed, allowing access to the flag.","tags":[{"name":"picoCTF","slug":"picoCTF","permalink":"http://aritlh.github.io/tags/picoCTF/"}],"categories":[{"name":"Hacking","slug":"Hacking","permalink":"http://aritlh.github.io/categories/Hacking/"},{"name":"CTFs Walkthrough","slug":"Hacking/CTFs-Walkthrough","permalink":"http://aritlh.github.io/categories/Hacking/CTFs-Walkthrough/"},{"name":"picoCTF","slug":"Hacking/CTFs-Walkthrough/picoCTF","permalink":"http://aritlh.github.io/categories/Hacking/CTFs-Walkthrough/picoCTF/"}]},{"title":"Arch Installation","date":"2023-10-24T16:28:59.000Z","path":"wiki/Technology Development/Linux/Arch/arch-installation/","text":"Update The System Clock12# timedatectl status# timedatectl set-ntp true Partition The Disk12# lsblk# cfdisk Format The Partition12# mkfs.ext4 /dev/root_partition# mkfs.fat -F 32 /dev/efi_system_partition Mount the File Systems12# mount /dev/root_partition /mnt# mount --mkdir /dev/efi_system_partition /mnt/boot Install Essential Packages1# pacstrap -K /mnt base dhcpcd base-devel linux-lts linux-firmware kakoune networkmanager network-manager-applet grub efibootmgr linux-lts-headers mtools git xdg-user-dirs Configure the Systems1# genfstab -U /mnt &gt;&gt; /mnt/etc/fstab Chroot1# arch-chroot /mnt Time Zone12# ln -sf /usr/share/zoneinfo/Region/City /etc/localtime# hwclock --systohc LocalizationEdit /etc/locale.gen and uncomment en_US.UTF-8 UTF-8 and other needed locales. Generate the locales by running: 1# locale-gen Create the /etc/locale.conf file, and set the LANG variable accordingly: 1LANG=en_US.UTF-8 Network ConfigurationCreate /etc/hostname with the name your host: 1nameFromYourHost Create /etc/hosts: 123127.0.0.1 localhost::1 localhost127.0.0.1 nameFromYourHost.localdomain nameFromYourHost Enable Network Manager 1# systemctl enable NetworkManager Install GRUB12# grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB# grub-mkconfig -o /boot/grub/grub.cfg Set the root Password1# passwd Create a New User123# useradd -mG wheel yourUsername# passwd yourUsername# export EDITOR=kakoune Edit /etc/sudoers run “visudo” and uncomment the following line: 12### Uncomment to allow members of group wheel to execute any command%wheel ALL=(ALL) ALL Exit, Umount, and Reboot123# exit# umount -a# reboot (optional) Mounting Disk Partitionedit /etc/fstab, and following this reference: 1234567891011121314# /dev/sda2UUID=******b49-******-4******-******30-******949c / ext4 rw,relatime 0 1# /dev/sda1UUID=******-****** /boot vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 0 2# /dev/sda2UUID=f******-9***-4***-9***-******92949c / ext4 rw,relatime 0 1# /dev/sda1UUID=******-****** /boot vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 0 2# /dev/sda3/dev/disk/by-uuid/12***d*a-****-****-****-************ff /home/renology ext4 defaults 0 2","tags":[{"name":"ArchLinux","slug":"ArchLinux","permalink":"http://aritlh.github.io/tags/ArchLinux/"}],"categories":[{"name":"Technology Development","slug":"Technology-Development","permalink":"http://aritlh.github.io/categories/Technology-Development/"},{"name":"Linux","slug":"Technology-Development/Linux","permalink":"http://aritlh.github.io/categories/Technology-Development/Linux/"},{"name":"Arch","slug":"Technology-Development/Linux/Arch","permalink":"http://aritlh.github.io/categories/Technology-Development/Linux/Arch/"}]},{"title":"Osu! Installation","date":"2023-10-24T16:28:59.000Z","path":"wiki/Technology Development/Linux/Gaming on Linux/osu-installation/","text":"This guide implies you have read Help:Reading and&#x2F;or know your ways around Linux. In case you’re using a different distribution, you can try hwsmm’s guide. osu! is a freeware rhythm game where player uses mouse and keyboard input to click on circles to the rhythm in main gameplay mode. The following install guide has different installation methods for osu!, one with Lutris and a basic one. There are also included some instructions on improving experience with the game, like switching to a custom wine version or switching to PipeWire audio server. You should pick your preferred installation method and then decide whether you want to do additional steps to improve your experience with the game also outlined here. Installing osu!Enable multilib and install wine and winetricks Update Deps1$ sudo pacman -Syy &amp;&amp; sudo pacman -Syu Prepare wineprefixCreate WINEPREFIX for your osu! installation and run winetricks to install required dependencies for osu! to work correctly. 1$ WINEARCH=win32 WINEPREFIX=~/.wineosu winetricks dotnet40 gdiplus corefonts baekmuk meiryo tahoma vlgothic cjkfonts fontfix cjkfonts allows you to see CJK characters correctly, instead of squares. gdiplus fixes icon display in osu! settings. You do not need to install gdiplus if you use wine version 6.10 or above. Installing The Game You can skip next 3 steps if you want to symlink your existing osu! installation. Refer to ln(1) for instructions. 1$ mkdir ~/.wineosu/osu/ Download osu! executable. 1$ wget --output-document ~/.wineosu/osu/osu\\!.exe https://m1.ppy.sh/r/osu!install.exe Start osu! and test if it works correctly. 1$ WINEARCH=win32 WINEPREFIX=~/.wineosu wine ~/.wineosu/osu/osu\\!.exe Create startup script for osu! in ~/.wineosu/osu/start.sh create: 1234567891011121314#!/usr/bin/env bash#export PATH=&quot;$HOME/.wineosu/osuwine/bin:$PATH&quot; #Use custom WINE version to run osu!export WINEARCH=win32export WINEPREFIX=&quot;$HOME/.wineosu&quot;#export WINEFSYNC=1#VSync. For some reason, some people had been getting input latency issues and for some reason, the fix is to set VSync to off.export vblank_mode=0 #For AMD, Intel and othersexport __GL_SYNC_TO_VBLANK=0 #For NVIDIA proprietary and open source &gt;=500#export STAGING_AUDIO_PERIOD=10000#start osu!wine osu\\!.exe Creating freedesktop entryFetch osu! logo. 1$ wget --output-document ~/.wineosu/osu/icon.png https://github.com/ppy/osu-wiki/raw/master/wiki/Brand_identity_guidelines/img/usage-full-colour.png Create and edit a new desktop entry file for osu!. in ~/.local/share/applications/osu.desktop create: 123456789[Desktop Entry]Type=ApplicationComment=A freeware rhythm game where player uses mouse and keyboard input to click on circles to the rhythm in main gameplay mode.Icon=&lt;change to your home folder&gt;/.wineosu/osu/icon.png #XDG spec doesn\\\\&#x27;t support environment variables. Enter home path manually.Exec=&lt;change to your home folder&gt;/.wineosu/osu/start.sh #XDG spec doesn\\\\&#x27;t support environment variables. Enter home path manually.Path=/home/&lt;change to your home folder&gt;/.wineosu/osu #XDG spec doesn\\\\&#x27;t support environment variables. Enter home path manually.GenericName=osu!Name=osu!StartupNotify=true Let’s start the GAMEEEEEDKAJDLASJFLASDJFJ!!! TroubleshootingNetworkingWTF is this sh*t???!! 12345678910111213141516...0128:fixme:virtual:NtFlushProcessWriteBuffers stub0128:fixme:crypt:SystemFunction041 (010A8A74, 10, 0): stub [RtlDecryptMemory]0128:fixme:ras:RasEnumConnectionsW (01109FD8,0728F17C,0728F180),stub!0128:fixme:ras:RasEnumConnectionsW RAS support is not implemented! Configure program to use LAN connection/winsock instead!0128:fixme:ras:RasConnectionNotificationW (FFFFFFFF,000002F4,0x00000003),stub!0128:err:winediag:process_attach Failed to load libgnutls, secure connections will not be available.0128:err:secur32:SECUR32_initSchannelSP no schannel support, expect problems0128:err:winediag:ntlm_check_version ntlm_auth was not found. Make sure that ntlm_auth &gt;= 3.0.25 is in your path. Usually, you can find it in the winbind package of your distribution.0128:err:ntlm:ntlm_LsaApInitializePackage no NTLM support, expect problems0124:fixme:thread:NtQueryInformationThread ThreadIsIoPending info class not supported yet0024:fixme:olepicture:OLEPictureImpl_QueryInterface () : asking for unsupported interface &#123;c3fcc19e-a970-11d2-8b5a-00a0c9b7c9c4&#125;0024:fixme:olepicture:OLEPictureImpl_QueryInterface () : asking for unsupported interface &#123;b196b283-bab4-101a-b69c-00aa00341d07&#125;0024:fixme:olepicture:OLEPictureImpl_QueryInterface () : asking for unsupported interface &#123;00000003-0000-0000-c000-000000000046&#125;0024:fixme:olepicture:OLEPictureImpl_QueryInterface () : asking for unsupported interface &#123;00000144-0000-0000-c000-000000000046&#125;... Don’t worry, it’s because you haven’t configured the network in wine. Take a look at this reference Wine Networking. After installation, the lib32-gnutls package may need to be installed for applications making TLS or HTTPS connections to work. For ICMP (ping), Wine may need the network access as described in the WineHQ FAQ: 1# setcap cap_net_raw+epi /usr/bin/wine-preloader If issues arise after this (such as an unhandled exception or privileged instruction), remove via: 1# setcap -r /usr/bin/wine-preloader Dependency Requirements1$ sudo pacman -Sy pacman -Sy --noconfirm --needed git base-devel p7zip wget zenity wine-staging winetricks giflib lib32-giflib libpng lib32-libpng libldap lib32-libldap gnutls lib32-gnutls mpg123 lib32-mpg123 openal lib32-openal v4l-utils lib32-v4l-utils libpulse lib32-libpulse alsa-plugins lib32-alsa-plugins alsa-lib lib32-alsa-lib libjpeg-turbo lib32-libjpeg-turbo libxcomposite lib32-libxcomposite libxinerama lib32-libxinerama ncurses lib32-ncurses opencl-icd-loader lib32-opencl-icd-loader libxslt lib32-libxslt libva lib32-libva gtk3 lib32-gtk3 gst-plugins-base-libs lib32-gst-plugins-base-libs vulkan-icd-loader lib32-vulkan-icd-loader cups samba dosbox 1$ sudo pacman --needed -Sy libxcomposite lib32-libxcomposite gnutls lib32-gnutls wine winetricks BeatmapsIf your Beatmap couldn’t be loaded successfully. Just following this: 1$ yay -S osu-handler winetricks.log123456789101112131415161718192021222324252627282930313233343536373839404142remove_mono internalwinxpdotnet40sourcehansansfakechinesefakejapanesefakekoreanunifontcjkfontsgdiplusfakechinesefakejapanesefakekoreancjkfontsfakechinesefakejapanesefakekoreancjkfontsfakechinesefakejapanesefakekoreancjkfontsandalearialcomicsanscouriergeorgiaimpacttimestrebuchetverdanawebdingscorefontsbaekmukmeiryotahomavlgothicfakechinesefakejapanesefakekoreancjkfontsfontfix References Installing osu! on Linux with low-latency [2023] KatouMegumi’s guide","tags":[{"name":"Osu!","slug":"Osu","permalink":"http://aritlh.github.io/tags/Osu/"}],"categories":[{"name":"Technology Development","slug":"Technology-Development","permalink":"http://aritlh.github.io/categories/Technology-Development/"},{"name":"Linux","slug":"Technology-Development/Linux","permalink":"http://aritlh.github.io/categories/Technology-Development/Linux/"},{"name":"Gaming on Linux","slug":"Technology-Development/Linux/Gaming-on-Linux","permalink":"http://aritlh.github.io/categories/Technology-Development/Linux/Gaming-on-Linux/"}]},{"title":"Welcome Aritlh's Wiki Site","date":"2017-01-21T18:55:57.000Z","path":"wiki/index/","text":"Here is the translation of the passage into English: This is aritlh’s personal Wiki site, mainly recording some scattered knowledge points summarized from his own words. I’ve always felt that knowledge should not be fragmented, but structured. So I hope to find an elegant way to manage my knowledge. I have learned about or tried methods such as OneNote, Evernote, Blogs, Wikis, etc. and summarized a set of processes for knowledge acquisition, absorption, and management that I think is relatively reasonable: Use web pages, RSS, WeChat, and other online channels as sources of knowledge acquisition. Use a note-taking system (handwritten notes, OneNote, Evernote) to initially filter valuable and targeted information, bookmark information, classify and organize it, and take notes on the key points after reading. For the occasional one or two sentences, or very scattered ideas, inspirations, and initially digested content that come to mind, record them in a Wiki. Finally, when there is a certain amount of content in a section of the Wiki, re-read the notes and content in that section of the Wiki, refine and distill them, add your own thoughts and understanding, and write an article to be published on a blog. In practice, the note-taking system is mainly for classifying and organizing large chunks of information, the Wiki is mainly for accumulating scattered knowledge, and the blog is only for the essence. When a section of the Wiki is first created, there may be very little content or just a sentence. But through this process, as you encounter more and more about that topic, the scattered knowledge also increases, and the content recorded in that section of the Wiki will also increase, which is to structure and organize what was originally a large amount of fragmented knowledge through accumulation. The purpose of the blog is to share and showcase your knowledge and demonstrate your level of expertise. It needs to present something substantial, so it is not suitable for scattered snippets of knowledge. It is more suitable for presenting a series of summaries or tutorials, as a highly systematic knowledge platform. When I tried to deploy my own Wiki system, I started to struggle with choosing which Wiki system to use. Referring to online blogs, I actually deployed and compared several popular Wiki systems: MediaWiki, DokuWiki, MDwiki, TiddlyWiki, wiz, vimwiki, Simiki, Wikitten, etc. None of them were satisfactory. Some were difficult and complex to deploy, some had ugly interfaces, some couldn’t have nested categories, some nested categories couldn’t be expanded, some couldn’t search, and some even didn’t use Markdown… Based on these unsatisfactory user experiences, I summarized some of my requirements for a personal Wiki: Simple and beautiful interface with a friendly font and layout Support for multi-level categorization Easy to modify and update content Simple deployment Category directories can be expanded and collapsed When a category is expanded, you can view the titles of all articles&#x2F;entries under that category Each article&#x2F;entry can be assigned multiple categories&#x2F;tags The Wiki should support internal linking Use Markdown to write articles&#x2F;entries Support full-text search (searchable content and titles) In my previous usage, Wikitten was the closest to my needs, but there were still some conditions that were not met, such as deployment and search. But personally, I liked the style of Wikitten. So in the end, I chose to mimic the style of Wikitten and write this Hexo-based Wiki theme hexo-theme-Wikitten as my own Wiki system, which basically implements the above requirements. Now I’m using it for myself for the time being, of course, this initial functionality is still very simple, and there is a bunch of bugs and TODO lists that need to be maintained. I welcome anyone interested to submit PRs.","tags":[],"categories":[]}],"categories":[{"name":"Hacking","slug":"Hacking","permalink":"http://aritlh.github.io/categories/Hacking/"},{"name":"CTFs Walkthrough","slug":"Hacking/CTFs-Walkthrough","permalink":"http://aritlh.github.io/categories/Hacking/CTFs-Walkthrough/"},{"name":"Vulnhub","slug":"Hacking/CTFs-Walkthrough/Vulnhub","permalink":"http://aritlh.github.io/categories/Hacking/CTFs-Walkthrough/Vulnhub/"},{"name":"picoCTF","slug":"Hacking/CTFs-Walkthrough/picoCTF","permalink":"http://aritlh.github.io/categories/Hacking/CTFs-Walkthrough/picoCTF/"},{"name":"Technology Development","slug":"Technology-Development","permalink":"http://aritlh.github.io/categories/Technology-Development/"},{"name":"Linux","slug":"Technology-Development/Linux","permalink":"http://aritlh.github.io/categories/Technology-Development/Linux/"},{"name":"Arch","slug":"Technology-Development/Linux/Arch","permalink":"http://aritlh.github.io/categories/Technology-Development/Linux/Arch/"},{"name":"Gaming on Linux","slug":"Technology-Development/Linux/Gaming-on-Linux","permalink":"http://aritlh.github.io/categories/Technology-Development/Linux/Gaming-on-Linux/"}],"tags":[{"name":"Vulnhub","slug":"Vulnhub","permalink":"http://aritlh.github.io/tags/Vulnhub/"},{"name":"picoCTF","slug":"picoCTF","permalink":"http://aritlh.github.io/tags/picoCTF/"},{"name":"ArchLinux","slug":"ArchLinux","permalink":"http://aritlh.github.io/tags/ArchLinux/"},{"name":"Osu!","slug":"Osu","permalink":"http://aritlh.github.io/tags/Osu/"}]}